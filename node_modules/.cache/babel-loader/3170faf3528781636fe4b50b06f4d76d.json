{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\n\nvar K = require(\"./backend/tfjs_backend\");\n\nvar types_1 = require(\"./types\");\n\nvar generic_utils_1 = require(\"./utils/generic_utils\");\n\nvar Regularizer = function (_super) {\n  __extends(Regularizer, _super);\n\n  function Regularizer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return Regularizer;\n}(types_1.Serializable);\n\nexports.Regularizer = Regularizer;\n\nvar L1L2 = function (_super) {\n  __extends(L1L2, _super);\n\n  function L1L2(config) {\n    var _this = _super.call(this) || this;\n\n    var l1 = config == null || config.l1 == null ? 0.01 : config.l1;\n    var l2 = config == null || config.l2 == null ? 0.01 : config.l2;\n    _this.hasL1 = l1 !== 0;\n    _this.hasL2 = l2 !== 0;\n    _this.l1 = K.getScalar(l1);\n    _this.l2 = K.getScalar(l2);\n    return _this;\n  }\n\n  L1L2_1 = L1L2;\n\n  L1L2.prototype.apply = function (x) {\n    var regularization = tfjs_core_1.zeros([1]);\n\n    if (this.hasL1) {\n      regularization = K.add(regularization, K.sum(K.scalarTimesArray(this.l1, K.abs(x))));\n    }\n\n    if (this.hasL2) {\n      regularization = K.add(regularization, K.sum(K.scalarTimesArray(this.l2, K.square(x))));\n    }\n\n    return regularization.asScalar();\n  };\n\n  L1L2.prototype.getClassName = function () {\n    return 'L1L2';\n  };\n\n  L1L2.prototype.getConfig = function () {\n    return {\n      'l1': this.l1.dataSync()[0],\n      'l2': this.l2.dataSync()[0]\n    };\n  };\n\n  L1L2.fromConfig = function (cls, config) {\n    return new L1L2_1({\n      l1: config.l1,\n      l2: config.l2\n    });\n  };\n\n  L1L2 = L1L2_1 = __decorate([tfjs_core_1.doc({\n    heading: 'Regularizers',\n    namespace: 'regularizers'\n  })], L1L2);\n  return L1L2;\n  var L1L2_1;\n}(Regularizer);\n\nexports.L1L2 = L1L2;\ngeneric_utils_1.ClassNameMap.register('L1L2', L1L2);\n\nfunction l1(config) {\n  return new L1L2({\n    l1: config != null ? config.l1 : null,\n    l2: 0\n  });\n}\n\nexports.l1 = l1;\n\nfunction l2(config) {\n  return new L1L2({\n    l2: config != null ? config.l2 : null,\n    l1: 0\n  });\n}\n\nexports.l2 = l2;\nexports.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'l1l2': 'L1L2'\n};\n\nfunction serializeRegularizer(constraint) {\n  return generic_utils_1.serializeKerasObject(constraint);\n}\n\nexports.serializeRegularizer = serializeRegularizer;\n\nfunction deserializeRegularizer(config, customObjects) {\n  if (customObjects === void 0) {\n    customObjects = {};\n  }\n\n  return generic_utils_1.deserializeKerasObject(config, generic_utils_1.ClassNameMap.getMap().pythonClassNameMap, customObjects, 'regularizer');\n}\n\nexports.deserializeRegularizer = deserializeRegularizer;\n\nfunction getRegularizer(identifier) {\n  if (identifier == null) {\n    return null;\n  }\n\n  if (typeof identifier === 'string') {\n    var className = identifier in exports.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? exports.REGULARIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    var config = {\n      className: className,\n      config: {}\n    };\n    return deserializeRegularizer(config);\n  } else if (identifier instanceof Regularizer) {\n    return identifier;\n  } else {\n    return deserializeRegularizer(identifier);\n  }\n}\n\nexports.getRegularizer = getRegularizer;","map":null,"metadata":{},"sourceType":"script"}