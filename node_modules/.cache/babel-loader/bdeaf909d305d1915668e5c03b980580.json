{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar doc_1 = require(\"../doc\");\n\nvar util = require(\"../util\");\n\nvar array_ops_1 = require(\"./array_ops\");\n\nvar binary_ops_1 = require(\"./binary_ops\");\n\nvar operation_1 = require(\"./operation\");\n\nvar MovingAverageOps = function () {\n  function MovingAverageOps() {}\n\n  MovingAverageOps.movingAverage = function (v, x, decay, step, zeroDebias) {\n    if (zeroDebias === void 0) {\n      zeroDebias = true;\n    }\n\n    util.assertArgumentsAreTensors({\n      v: v,\n      x: x\n    }, 'movingAverage');\n    util.assertTypesMatch(v, x);\n    util.assert(util.arraysEqual(v.shape, x.shape), 'Shape mismatch in v and x');\n    var one = array_ops_1.ArrayOps.scalar(1);\n    decay = typeof decay === 'number' ? array_ops_1.ArrayOps.scalar(decay) : decay;\n    var oneMinusDecay = one.sub(decay);\n    var update = x.sub(v).mul(oneMinusDecay);\n\n    if (zeroDebias) {\n      util.assert(step != null, 'When using zeroDebias: true, step is required.');\n      step = typeof step === 'number' ? array_ops_1.ArrayOps.scalar(step) : step;\n      update = update.div(one.sub(binary_ops_1.BinaryOps.pow(decay, step)));\n    }\n\n    return v.add(update);\n  };\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Moving Average'\n  }), operation_1.operation], MovingAverageOps, \"movingAverage\", null);\n\n  return MovingAverageOps;\n}();\n\nexports.MovingAverageOps = MovingAverageOps;","map":null,"metadata":{},"sourceType":"script"}