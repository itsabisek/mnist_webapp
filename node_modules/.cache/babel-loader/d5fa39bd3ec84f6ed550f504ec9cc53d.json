{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar MatMulProgram = function () {\n  function MatMulProgram(aShape, bShape, transposeA, transposeB) {\n    if (transposeA === void 0) {\n      transposeA = false;\n    }\n\n    if (transposeB === void 0) {\n      transposeB = false;\n    }\n\n    this.variableNames = ['matrixA', 'matrixB'];\n    var outerShapeA = transposeA ? aShape[1] : aShape[0];\n    var outerShapeB = transposeB ? bShape[0] : bShape[1];\n    var sharedDim = transposeA ? aShape[0] : aShape[1];\n    this.outputShape = [outerShapeA, outerShapeB];\n\n    var aSnippetFromOffset = function aSnippetFromOffset(vec4Offset, indexVar) {\n      return transposeA ? indexVar + \" + \" + vec4Offset + \", aRow\" : \"aRow, \" + indexVar + \" + \" + vec4Offset;\n    };\n\n    var bSnippetFromOffset = function bSnippetFromOffset(vec4Offset, indexVar) {\n      return transposeB ? \"bCol, \" + indexVar + \" + \" + vec4Offset : indexVar + \" + \" + vec4Offset + \", bCol\";\n    };\n\n    var sharedDimNearestVec4 = Math.floor(sharedDim / 4) * 4;\n    var sharedDimVec4Remainder = sharedDim % 4;\n    this.userCode = \" float dotARowBCol(int aRow, int bCol) {\\n      float result = 0.0;\\n      for (int i = 0; i < \" + sharedDimNearestVec4 + \"; i += 4) {\\n        vec4 a = vec4(\\n          getMatrixA(\" + aSnippetFromOffset(0, 'i') + \"),\\n          getMatrixA(\" + aSnippetFromOffset(1, 'i') + \"),\\n          getMatrixA(\" + aSnippetFromOffset(2, 'i') + \"),\\n          getMatrixA(\" + aSnippetFromOffset(3, 'i') + \")\\n        );\\n        vec4 b = vec4(\\n          getMatrixB(\" + bSnippetFromOffset(0, 'i') + \"),\\n          getMatrixB(\" + bSnippetFromOffset(1, 'i') + \"),\\n          getMatrixB(\" + bSnippetFromOffset(2, 'i') + \"),\\n          getMatrixB(\" + bSnippetFromOffset(3, 'i') + \")\\n        );\\n\\n        result += dot(a, b);\\n      }\\n\\n      if (\" + (sharedDimVec4Remainder === 1) + \") {\\n        result += getMatrixA(\" + aSnippetFromOffset(0, sharedDimNearestVec4) + \") *\\n          getMatrixB(\" + bSnippetFromOffset(0, sharedDimNearestVec4) + \");\\n      } else if (\" + (sharedDimVec4Remainder === 2) + \") {\\n        vec2 a = vec2(\\n          getMatrixA(\" + aSnippetFromOffset(0, sharedDimNearestVec4) + \"),\\n          getMatrixA(\" + aSnippetFromOffset(1, sharedDimNearestVec4) + \")\\n        );\\n        vec2 b = vec2(\\n          getMatrixB(\" + bSnippetFromOffset(0, sharedDimNearestVec4) + \"),\\n          getMatrixB(\" + bSnippetFromOffset(1, sharedDimNearestVec4) + \")\\n        );\\n        result += dot(a, b);\\n      } else if (\" + (sharedDimVec4Remainder === 3) + \") {\\n        vec3 a = vec3(\\n          getMatrixA(\" + aSnippetFromOffset(0, sharedDimNearestVec4) + \"),\\n          getMatrixA(\" + aSnippetFromOffset(1, sharedDimNearestVec4) + \"),\\n          getMatrixA(\" + aSnippetFromOffset(2, sharedDimNearestVec4) + \")\\n        );\\n        vec3 b = vec3(\\n          getMatrixB(\" + bSnippetFromOffset(0, sharedDimNearestVec4) + \"),\\n          getMatrixB(\" + bSnippetFromOffset(1, sharedDimNearestVec4) + \"),\\n          getMatrixB(\" + bSnippetFromOffset(2, sharedDimNearestVec4) + \")\\n        );\\n        result += dot(a, b);\\n      }\\n\\n      return result;\\n    }\\n\\n    void main() {\\n      ivec2 resRC = getOutputCoords();\\n      setOutput(dotARowBCol(resRC.x, resRC.y));\\n    }\\n    \";\n  }\n\n  return MatMulProgram;\n}();\n\nexports.MatMulProgram = MatMulProgram;","map":null,"metadata":{},"sourceType":"script"}