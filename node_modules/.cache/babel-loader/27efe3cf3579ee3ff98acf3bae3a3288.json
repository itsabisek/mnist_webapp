{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\n\nvar common_1 = require(\"./common\");\n\nvar DType;\n\n(function (DType) {\n  DType[\"float32\"] = \"float32\";\n  DType[\"int32\"] = \"int32\";\n  DType[\"bool\"] = \"bool\";\n})(DType = exports.DType || (exports.DType = {}));\n\nvar _nextUniqueTensorId = 0;\n\nvar SymbolicTensor = function () {\n  function SymbolicTensor(dtype, shape, sourceLayer, inputs, callArgs, name, outputTensorIndex) {\n    this.dtype = dtype;\n    this.shape = shape;\n    this.sourceLayer = sourceLayer;\n    this.inputs = inputs;\n    this.callArgs = callArgs;\n    this.outputTensorIndex = outputTensorIndex;\n    this.id = _nextUniqueTensorId++;\n\n    if (name != null) {\n      this.originalName = common_1.getScopedTensorName(name);\n      this.name = common_1.getUniqueTensorName(this.originalName);\n    }\n  }\n\n  SymbolicTensor = __decorate([tfjs_core_1.doc({\n    heading: 'Models',\n    'subheading': 'Classes'\n  })], SymbolicTensor);\n  return SymbolicTensor;\n}();\n\nexports.SymbolicTensor = SymbolicTensor;\n\nvar ConcreteTensor = function () {\n  function ConcreteTensor(val, name) {\n    this.dtype = DType.float32;\n    this.shape = val.shape;\n    this.val = val;\n    this.id = _nextUniqueTensorId++;\n\n    if (name != null) {\n      this.originalName = common_1.getScopedTensorName(name);\n      this.name = common_1.getUniqueTensorName(this.originalName);\n    }\n  }\n\n  ConcreteTensor.prototype.value = function () {\n    return this.val;\n  };\n\n  return ConcreteTensor;\n}();\n\nexports.ConcreteTensor = ConcreteTensor;\n\nfunction checkShapesMatch(x, y) {\n  if (x.shape.toString() !== y.shape.toString()) {\n    throw new Error('Shape mismatch: ' + JSON.stringify(x.shape) + ' vs. ' + JSON.stringify(y.shape));\n  }\n}\n\nfunction getValueTensor(val) {\n  return val instanceof ConcreteTensor ? val.value() : val;\n}\n\nvar DEFAULT_VARIABLE_NAME_PREFIX = 'Variable';\n\nvar LayerVariable = function () {\n  function LayerVariable(val, dtype, name, trainable, constraint) {\n    if (dtype === void 0) {\n      dtype = DType.float32;\n    }\n\n    if (name === void 0) {\n      name = DEFAULT_VARIABLE_NAME_PREFIX;\n    }\n\n    if (trainable === void 0) {\n      trainable = true;\n    }\n\n    if (constraint === void 0) {\n      constraint = null;\n    }\n\n    this.dtype = dtype == null ? DType.float32 : dtype;\n    this.shape = val.shape;\n    this.id = _nextUniqueTensorId++;\n    name = name == null ? DEFAULT_VARIABLE_NAME_PREFIX : name;\n    this.originalName = common_1.getScopedTensorName(name);\n    this.name = common_1.getUniqueTensorName(this.originalName);\n    this.trainable = trainable;\n    this.constraint = constraint;\n    this.val = tfjs_core_1.variable(getValueTensor(val), this.trainable, this.name, this.dtype);\n  }\n\n  LayerVariable.prototype.read = function () {\n    return this.val;\n  };\n\n  LayerVariable.prototype.write = function (newVal) {\n    checkShapesMatch(this.val, newVal);\n    this.val.assign(getValueTensor(newVal));\n\n    if (this.constraint != null) {\n      this.val.assign(this.constraint.apply(this.val));\n    }\n\n    return this;\n  };\n\n  return LayerVariable;\n}();\n\nexports.LayerVariable = LayerVariable;\n\nvar Serializable = function () {\n  function Serializable() {}\n\n  return Serializable;\n}();\n\nexports.Serializable = Serializable;","map":null,"metadata":{},"sourceType":"script"}