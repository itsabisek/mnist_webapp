{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tex_util_1 = require(\"./tex_util\");\n\nvar TextureManager = function () {\n  function TextureManager(gpgpu) {\n    this.gpgpu = gpgpu;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n    this.freeTextures = {};\n    this.logEnabled = false;\n    this.allocatedTextures = [];\n    this.usedTextureCount = {};\n  }\n\n  TextureManager.prototype.acquireTexture = function (shapeRC, texType) {\n    if (texType === void 0) {\n      texType = tex_util_1.TextureType.FLOAT;\n    }\n\n    var shapeKey = getKeyFromTextureShape(shapeRC, texType);\n\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    if (!(shapeKey in this.usedTextureCount)) {\n      this.usedTextureCount[shapeKey] = 0;\n    }\n\n    this.usedTextureCount[shapeKey]++;\n\n    if (this.freeTextures[shapeKey].length > 0) {\n      this.numFreeTextures--;\n      this.numUsedTextures++;\n      this.log();\n      return this.freeTextures[shapeKey].shift();\n    }\n\n    this.numUsedTextures++;\n    this.log();\n    var newTexture = this.gpgpu.createMatrixTexture(shapeRC[0], shapeRC[1]);\n    this.allocatedTextures.push(newTexture);\n    return newTexture;\n  };\n\n  TextureManager.prototype.releaseTexture = function (texture, shape, texType) {\n    if (texType === void 0) {\n      texType = tex_util_1.TextureType.FLOAT;\n    }\n\n    var shapeKey = getKeyFromTextureShape(shape, texType);\n\n    if (!(shapeKey in this.freeTextures)) {\n      this.freeTextures[shapeKey] = [];\n    }\n\n    this.freeTextures[shapeKey].push(texture);\n    this.numFreeTextures++;\n    this.numUsedTextures--;\n    this.usedTextureCount[shapeKey]--;\n    this.log();\n  };\n\n  TextureManager.prototype.log = function () {\n    if (!this.logEnabled) {\n      return;\n    }\n\n    var total = this.numFreeTextures + this.numUsedTextures;\n    console.log('Free/Used', this.numFreeTextures + \" / \" + this.numUsedTextures, \"(\" + total + \")\");\n  };\n\n  TextureManager.prototype.getNumUsedTextures = function () {\n    return this.numUsedTextures;\n  };\n\n  TextureManager.prototype.getNumFreeTextures = function () {\n    return this.numFreeTextures;\n  };\n\n  TextureManager.prototype.dispose = function () {\n    var _this = this;\n\n    if (this.allocatedTextures == null) {\n      return;\n    }\n\n    this.allocatedTextures.forEach(function (texture) {\n      _this.gpgpu.deleteMatrixTexture(texture);\n    });\n    this.freeTextures = null;\n    this.allocatedTextures = null;\n    this.usedTextureCount = null;\n    this.numUsedTextures = 0;\n    this.numFreeTextures = 0;\n  };\n\n  return TextureManager;\n}();\n\nexports.TextureManager = TextureManager;\n\nfunction getKeyFromTextureShape(shapeRowsCol, texType) {\n  return shapeRowsCol[0] + \"_\" + shapeRowsCol[1] + \"_\" + texType;\n}","map":null,"metadata":{},"sourceType":"script"}