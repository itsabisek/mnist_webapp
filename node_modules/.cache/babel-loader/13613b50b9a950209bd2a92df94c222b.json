{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfc = require(\"@tensorflow/tfjs-core\");\n\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\n\nvar errors_1 = require(\"../errors\");\n\nfunction isInteger(x) {\n  return x === parseInt(x.toString(), 10);\n}\n\nexports.isInteger = isInteger;\n\nfunction arrayProd(array, begin, end) {\n  if (begin == null) {\n    begin = 0;\n  }\n\n  if (end == null) {\n    end = array.length;\n  }\n\n  var prod = 1;\n\n  for (var i = begin; i < end; ++i) {\n    prod *= array[i];\n  }\n\n  return prod;\n}\n\nexports.arrayProd = arrayProd;\n\nfunction toArray1D(array) {\n  array = Array.isArray(array) ? new Float32Array(array) : array;\n  return tfjs_core_1.tensor1d(array);\n}\n\nfunction min(array) {\n  return tfc.min(toArray1D(array)).dataSync()[0];\n}\n\nexports.min = min;\n\nfunction max(array) {\n  return tfc.max(toArray1D(array)).dataSync()[0];\n}\n\nexports.max = max;\n\nfunction sum(array) {\n  return tfc.sum(toArray1D(array)).dataSync()[0];\n}\n\nexports.sum = sum;\n\nfunction mean(array) {\n  return sum(array) / array.length;\n}\n\nexports.mean = mean;\n\nfunction variance(array) {\n  var demeaned = tfc.sub(toArray1D(array), tfjs_core_1.scalar(mean(array)));\n  var sumSquare = tfc.sum(tfc.mulStrict(demeaned, demeaned)).dataSync()[0];\n  return sumSquare / array.length;\n}\n\nexports.variance = variance;\n\nfunction range(begin, end) {\n  if (end < begin) {\n    throw new errors_1.ValueError(\"end (\" + end + \") < begin (\" + begin + \") is forbidden.\");\n  }\n\n  var out = [];\n\n  for (var i = begin; i < end; ++i) {\n    out.push(i);\n  }\n\n  return out;\n}\n\nexports.range = range;","map":null,"metadata":{},"sourceType":"script"}