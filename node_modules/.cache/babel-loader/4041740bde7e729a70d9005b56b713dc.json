{"ast":null,"code":"var _jsxFileName = \"/home/abisek/Python/DL/heroku-apps/mnist_webapp/mnist-webapp/src/components/DrawCanvas.js\";\nimport React from 'react';\nimport { predict } from './Main';\nimport { PlotChart } from './PlotChart';\n\nvar tf = require('@tensorflow/tfjs');\n\nlet model = null;\nlet uri = window.location.href + 'modelJS/model.json';\nexport class Canvas extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.clearCanvas = () => {\n      const ctx = this.refs.canvas.getContext('2d');\n      ctx.clearRect(0, 0, this.refs.canvas.width, this.refs.canvas.height);\n      PlotChart.updateChart([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    };\n  }\n\n  async loadModel() {\n    try {\n      model = await tf.loadLayersModel(uri);\n      console.log(model);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  componentDidMount() {\n    // const {canvasHeight, canvasWidth} = this.state.canvasDims\n    // this.refs.canvas.height = canvasHeight\n    // this.refs.canvas.width = canvasWidth\n    this.loadModel();\n    this.setupCanvas();\n  }\n\n  componentDidUpdate() {\n    // const {canvasHeight, canvasWidth} = this.state.canvasDims\n    // this.refs.canvas.height = canvasHeight\n    // this.refs.canvas.width = canvasWidth\n    this.setupCanvas();\n  }\n\n  setupCanvas() {\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext('2d');\n    let penDown = false;\n\n    let startDrawing = () => {\n      penDown = true;\n    };\n\n    let endDrawing = () => {\n      penDown = false;\n      ctx.beginPath();\n      let imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      imageData = tf.browser.fromPixels(imageData, 1);\n      imageData = tf.image.resizeNearestNeighbor(imageData, [28, 28]);\n      tf.browser.toPixels(imageData, this.refs.showCanvas);\n      imageData = tf.expandDims(imageData);\n      console.log(imageData);\n      let predictions = predict(model, imageData);\n      PlotChart.updateChart(predictions);\n    };\n\n    let draw = e => {\n      if (!penDown) return;\n      ctx.lineWidth = 15;\n      ctx.lineCap = 'round';\n      ctx.shadowBlur = 2;\n      ctx.shadowOffsetX = 5;\n      ctx.shadowOffsetY = 3;\n      ctx.shadowColor = \"rgba(0, 0, 0, 0.5)\";\n      ctx.lineTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n      ctx.stroke();\n    };\n\n    canvas.addEventListener('mousedown', startDrawing);\n    canvas.addEventListener('mouseup', endDrawing);\n    canvas.addEventListener('mousemove', draw);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 92\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"drawCanvas\",\n      width: \"500\",\n      height: \"500\",\n      ref: \"canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93\n      },\n      __self: this\n    }, \"Sorry your browser does not support canvas\"), React.createElement(\"button\", {\n      id: \"clearButton\",\n      onClick: this.clearCanvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 96\n      },\n      __self: this\n    }, \"Clear\"), React.createElement(\"canvas\", {\n      id: \"showCanvas\",\n      width: \"50\",\n      height: \"50\",\n      ref: \"showCanvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/abisek/Python/DL/heroku-apps/mnist_webapp/mnist-webapp/src/components/DrawCanvas.js"],"names":["React","predict","PlotChart","tf","require","model","uri","window","location","href","Canvas","Component","clearCanvas","ctx","refs","canvas","getContext","clearRect","width","height","updateChart","loadModel","loadLayersModel","console","log","e","componentDidMount","setupCanvas","componentDidUpdate","penDown","startDrawing","endDrawing","beginPath","imageData","getImageData","browser","fromPixels","image","resizeNearestNeighbor","toPixels","showCanvas","expandDims","predictions","draw","lineWidth","lineCap","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","lineTo","clientX","offsetLeft","clientY","offsetTop","stroke","addEventListener","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,OAAR,QAAsB,QAAtB;AACA,SAAQC,SAAR,QAAwB,aAAxB;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,kBAAD,CAAhB;;AAEA,IAAIC,KAAK,GAAG,IAAZ;AACA,IAAIC,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,oBAAjC;AAEA,OAAO,MAAMC,MAAN,SAAqBV,KAAK,CAACW,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SA4E3CC,WA5E2C,GA4E7B,MAAM;AACnB,YAAMC,GAAG,GAAG,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,UAAjB,CAA4B,IAA5B,CAAZ;AACAH,MAAAA,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKH,IAAL,CAAUC,MAAV,CAAiBG,KAArC,EAA4C,KAAKJ,IAAL,CAAUC,MAAV,CAAiBI,MAA7D;AACAjB,MAAAA,SAAS,CAACkB,WAAV,CAAsB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,EAAmB,CAAnB,CAAtB;AACA,KAhF0C;AAAA;;AAE3C,QAAMC,SAAN,GAAiB;AAChB,QAAG;AACFhB,MAAAA,KAAK,GAAI,MAAMF,EAAE,CAACmB,eAAH,CAAmBhB,GAAnB,CAAf;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAYnB,KAAZ;AACA,KAHD,CAGC,OAAMoB,CAAN,EAAQ;AACRF,MAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACA;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAEnB;AACA;AACA;AACA,SAAKL,SAAL;AACA,SAAKM,WAAL;AACA;;AAEDC,EAAAA,kBAAkB,GAAG;AACpB;AACA;AACA;AAEA,SAAKD,WAAL;AACA;;AAEDA,EAAAA,WAAW,GAAG;AACb,UAAMZ,MAAM,GAAG,KAAKD,IAAL,CAAUC,MAAzB;AACA,UAAMF,GAAG,GAAGE,MAAM,CAACC,UAAP,CAAkB,IAAlB,CAAZ;AAEA,QAAIa,OAAO,GAAG,KAAd;;AAEA,QAAIC,YAAY,GAAG,MAAM;AACxBD,MAAAA,OAAO,GAAG,IAAV;AACA,KAFD;;AAIA,QAAIE,UAAU,GAAG,MAAM;AACtBF,MAAAA,OAAO,GAAG,KAAV;AACAhB,MAAAA,GAAG,CAACmB,SAAJ;AAEA,UAAIC,SAAS,GAAGpB,GAAG,CAACqB,YAAJ,CAAiB,CAAjB,EAAmB,CAAnB,EAAqBnB,MAAM,CAACG,KAA5B,EAAkCH,MAAM,CAACI,MAAzC,CAAhB;AACAc,MAAAA,SAAS,GAAG9B,EAAE,CAACgC,OAAH,CAAWC,UAAX,CAAsBH,SAAtB,EAAgC,CAAhC,CAAZ;AACAA,MAAAA,SAAS,GAAI9B,EAAE,CAACkC,KAAH,CAASC,qBAAT,CAA+BL,SAA/B,EAAyC,CAAC,EAAD,EAAI,EAAJ,CAAzC,CAAb;AACA9B,MAAAA,EAAE,CAACgC,OAAH,CAAWI,QAAX,CAAoBN,SAApB,EAA8B,KAAKnB,IAAL,CAAU0B,UAAxC;AACAP,MAAAA,SAAS,GAAG9B,EAAE,CAACsC,UAAH,CAAcR,SAAd,CAAZ;AACAV,MAAAA,OAAO,CAACC,GAAR,CAAYS,SAAZ;AAEA,UAAIS,WAAW,GAAGzC,OAAO,CAACI,KAAD,EAAO4B,SAAP,CAAzB;AAEA/B,MAAAA,SAAS,CAACkB,WAAV,CAAsBsB,WAAtB;AAEA,KAfD;;AAiBA,QAAIC,IAAI,GAAGlB,CAAC,IAAI;AACf,UAAI,CAACI,OAAL,EACC;AAEDhB,MAAAA,GAAG,CAAC+B,SAAJ,GAAgB,EAAhB;AACA/B,MAAAA,GAAG,CAACgC,OAAJ,GAAc,OAAd;AACAhC,MAAAA,GAAG,CAACiC,UAAJ,GAAiB,CAAjB;AACAjC,MAAAA,GAAG,CAACkC,aAAJ,GAAoB,CAApB;AACAlC,MAAAA,GAAG,CAACmC,aAAJ,GAAoB,CAApB;AACAnC,MAAAA,GAAG,CAACoC,WAAJ,GAAkB,oBAAlB;AACApC,MAAAA,GAAG,CAACqC,MAAJ,CAAWzB,CAAC,CAAC0B,OAAF,GAAYpC,MAAM,CAACqC,UAA9B,EAA0C3B,CAAC,CAAC4B,OAAF,GAAYtC,MAAM,CAACuC,SAA7D;AACAzC,MAAAA,GAAG,CAAC0C,MAAJ;AAEA,KAbD;;AAeAxC,IAAAA,MAAM,CAACyC,gBAAP,CAAwB,WAAxB,EAAqC1B,YAArC;AACAf,IAAAA,MAAM,CAACyC,gBAAP,CAAwB,SAAxB,EAAmCzB,UAAnC;AACAhB,IAAAA,MAAM,CAACyC,gBAAP,CAAwB,WAAxB,EAAqCb,IAArC;AAEA;;AAQDc,EAAAA,MAAM,GAAG;AACR,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACP;AAAQ,MAAA,EAAE,EAAC,YAAX;AAAwB,MAAA,KAAK,EAAC,KAA9B;AAAoC,MAAA,MAAM,EAAC,KAA3C;AAAiD,MAAA,GAAG,EAAC,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDADO,EAIP;AAAQ,MAAA,EAAE,EAAC,aAAX;AAAyB,MAAA,OAAO,EAAE,KAAK7C,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJO,EAKP;AAAQ,MAAA,EAAE,EAAC,YAAX;AAAwB,MAAA,KAAK,EAAC,IAA9B;AAAmC,MAAA,MAAM,EAAG,IAA5C;AAAiD,MAAA,GAAG,EAAC,YAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALO,CAAR;AAOA;;AA1F0C","sourcesContent":["import React from 'react'\nimport {predict} from './Main'\nimport {PlotChart} from './PlotChart'\nvar tf = require('@tensorflow/tfjs')\n\nlet model = null\nlet uri = window.location.href + 'modelJS/model.json'\n\nexport class Canvas extends React.Component {\n\n\tasync loadModel(){\n\t\ttry{\n\t\t\tmodel =  await tf.loadLayersModel(uri)\n\t\t\tconsole.log(model);\n\t\t}catch(e){\n\t\t\tconsole.log(e)\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\n\t\t// const {canvasHeight, canvasWidth} = this.state.canvasDims\n\t\t// this.refs.canvas.height = canvasHeight\n\t\t// this.refs.canvas.width = canvasWidth\n\t\tthis.loadModel()\n\t\tthis.setupCanvas()\n\t}\n\n\tcomponentDidUpdate() {\n\t\t// const {canvasHeight, canvasWidth} = this.state.canvasDims\n\t\t// this.refs.canvas.height = canvasHeight\n\t\t// this.refs.canvas.width = canvasWidth\n\n\t\tthis.setupCanvas()\n\t}\n\n\tsetupCanvas() {\n\t\tconst canvas = this.refs.canvas\n\t\tconst ctx = canvas.getContext('2d')\n\n\t\tlet penDown = false\n\n\t\tlet startDrawing = () => {\n\t\t\tpenDown = true\n\t\t}\n\n\t\tlet endDrawing = () => {\n\t\t\tpenDown = false\n\t\t\tctx.beginPath()\n\n\t\t\tlet imageData = ctx.getImageData(0,0,canvas.width,canvas.height)\n\t\t\timageData = tf.browser.fromPixels(imageData,1)\n\t\t\timageData  = tf.image.resizeNearestNeighbor(imageData,[28,28])\n\t\t\ttf.browser.toPixels(imageData,this.refs.showCanvas)\n\t\t\timageData = tf.expandDims(imageData)\n\t\t\tconsole.log(imageData);\n\n\t\t\tlet predictions = predict(model,imageData)\n\n\t\t\tPlotChart.updateChart(predictions)\n\n\t\t}\n\n\t\tlet draw = e => {\n\t\t\tif (!penDown)\n\t\t\t\treturn\n\n\t\t\tctx.lineWidth = 15\n\t\t\tctx.lineCap = 'round'\n\t\t\tctx.shadowBlur = 2;\n\t\t\tctx.shadowOffsetX = 5;\n\t\t\tctx.shadowOffsetY = 3;\n\t\t\tctx.shadowColor = \"rgba(0, 0, 0, 0.5)\";\n\t\t\tctx.lineTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n\t\t\tctx.stroke()\n\n\t\t}\n\n\t\tcanvas.addEventListener('mousedown', startDrawing)\n\t\tcanvas.addEventListener('mouseup', endDrawing)\n\t\tcanvas.addEventListener('mousemove', draw)\n\n\t}\n\n\tclearCanvas = () => {\n\t\tconst ctx = this.refs.canvas.getContext('2d')\n\t\tctx.clearRect(0, 0, this.refs.canvas.width, this.refs.canvas.height)\n\t\tPlotChart.updateChart([0,0,0,0,0,0,0,0,0,0])\n\t}\n\n\trender() {\n\t\treturn (<div>\n\t\t\t<canvas id=\"drawCanvas\" width=\"500\" height=\"500\" ref=\"canvas\">\n\t\t\t\tSorry your browser does not support canvas\n\t\t\t</canvas>\n\t\t\t<button id=\"clearButton\" onClick={this.clearCanvas}>Clear</button>\n\t\t\t<canvas id=\"showCanvas\" width=\"50\" height = \"50\" ref=\"showCanvas\"></canvas>\n\t\t</div>)\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}