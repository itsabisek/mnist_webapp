{"ast":null,"code":"var _jsxFileName = \"/home/abisek/Python/DL/heroku-apps/mnist_webapp/mnist-webapp/src/components/DrawCanvas.js\";\nimport React from 'react';\nimport { loadModel, predict } from './Main';\n\nvar tf = require('@tensorflow/tfjs');\n\nlet model = null;\nlet uri = window.location.href + 'modelJS/model.json';\nexport class Canvas extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.loadModel = async () => {\n      try {\n        return await tf.loadLayersModel(uri);\n      } catch (e) {\n        console.log(e);\n      } // console.log(model)\n\n    };\n\n    this.clearCanvas = () => {\n      const ctx = this.refs.canvas.getContext('2d');\n      ctx.clearRect(0, 0, this.refs.canvas.width, this.refs.canvas.height);\n    };\n  }\n\n  componentDidMount() {\n    // const {canvasHeight, canvasWidth} = this.state.canvasDims\n    // this.refs.canvas.height = canvasHeight\n    // this.refs.canvas.width = canvasWidth\n    this.setupCanvas();\n    model = loadModel();\n    console.log(model);\n  }\n\n  componentDidUpdate() {\n    // const {canvasHeight, canvasWidth} = this.state.canvasDims\n    // this.refs.canvas.height = canvasHeight\n    // this.refs.canvas.width = canvasWidth\n    this.setupCanvas();\n  }\n\n  setupCanvas() {\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext('2d');\n    let penDown = false;\n\n    let startDrawing = () => {\n      penDown = true;\n    };\n\n    let endDrawing = () => {\n      penDown = false;\n      ctx.beginPath();\n      let imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      predict(model, imageData);\n    };\n\n    let draw = e => {\n      if (!penDown) return;\n      ctx.lineWidth = 15;\n      ctx.lineCap = 'round';\n      ctx.shadowBlur = 2;\n      ctx.shadowOffsetX = 5;\n      ctx.shadowOffsetY = 3;\n      ctx.shadowColor = \"rgba(0, 0, 0, 0.5)\";\n      ctx.lineTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n      ctx.stroke();\n    };\n\n    canvas.addEventListener('mousedown', startDrawing);\n    canvas.addEventListener('mouseup', endDrawing);\n    canvas.addEventListener('mousemove', draw);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"drawCanvas\",\n      width: \"500\",\n      height: \"500\",\n      ref: \"canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 88\n      },\n      __self: this\n    }, \"Sorry your browser does not support canvas\"), React.createElement(\"button\", {\n      id: \"clearButton\",\n      onClick: this.clearCanvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }, \"Clear\"));\n  }\n\n}","map":{"version":3,"sources":["/home/abisek/Python/DL/heroku-apps/mnist_webapp/mnist-webapp/src/components/DrawCanvas.js"],"names":["React","loadModel","predict","tf","require","model","uri","window","location","href","Canvas","Component","loadLayersModel","e","console","log","clearCanvas","ctx","refs","canvas","getContext","clearRect","width","height","componentDidMount","setupCanvas","componentDidUpdate","penDown","startDrawing","endDrawing","beginPath","imageData","getImageData","draw","lineWidth","lineCap","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","lineTo","clientX","offsetLeft","clientY","offsetTop","stroke","addEventListener","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,SAAR,EAAkBC,OAAlB,QAAgC,QAAhC;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,kBAAD,CAAhB;;AAEA,IAAIC,KAAK,GAAG,IAAZ;AACA,IAAIC,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,oBAAjC;AAEA,OAAO,MAAMC,MAAN,SAAqBV,KAAK,CAACW,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAE3CV,SAF2C,GAE/B,YAAY;AACvB,UAAG;AACF,eAAO,MAAME,EAAE,CAACS,eAAH,CAAmBN,GAAnB,CAAb;AACA,OAFD,CAEC,OAAMO,CAAN,EAAQ;AACRC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACA,OALsB,CAMvB;;AACA,KAT0C;;AAAA,SAyE3CG,WAzE2C,GAyE7B,MAAM;AACnB,YAAMC,GAAG,GAAG,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,UAAjB,CAA4B,IAA5B,CAAZ;AACAH,MAAAA,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKH,IAAL,CAAUC,MAAV,CAAiBG,KAArC,EAA4C,KAAKJ,IAAL,CAAUC,MAAV,CAAiBI,MAA7D;AACA,KA5E0C;AAAA;;AAW3CC,EAAAA,iBAAiB,GAAG;AAEnB;AACA;AACA;AAGA,SAAKC,WAAL;AACApB,IAAAA,KAAK,GAAGJ,SAAS,EAAjB;AACAa,IAAAA,OAAO,CAACC,GAAR,CAAYV,KAAZ;AAGA;;AAEDqB,EAAAA,kBAAkB,GAAG;AACpB;AACA;AACA;AAEA,SAAKD,WAAL;AACA;;AAEDA,EAAAA,WAAW,GAAG;AACb,UAAMN,MAAM,GAAG,KAAKD,IAAL,CAAUC,MAAzB;AACA,UAAMF,GAAG,GAAGE,MAAM,CAACC,UAAP,CAAkB,IAAlB,CAAZ;AAEA,QAAIO,OAAO,GAAG,KAAd;;AAEA,QAAIC,YAAY,GAAG,MAAM;AACxBD,MAAAA,OAAO,GAAG,IAAV;AACA,KAFD;;AAIA,QAAIE,UAAU,GAAG,MAAM;AACtBF,MAAAA,OAAO,GAAG,KAAV;AACAV,MAAAA,GAAG,CAACa,SAAJ;AAEA,UAAIC,SAAS,GAAGd,GAAG,CAACe,YAAJ,CAAiB,CAAjB,EAAmB,CAAnB,EAAqBb,MAAM,CAACG,KAA5B,EAAkCH,MAAM,CAACI,MAAzC,CAAhB;AACArB,MAAAA,OAAO,CAACG,KAAD,EAAO0B,SAAP,CAAP;AAEA,KAPD;;AASA,QAAIE,IAAI,GAAGpB,CAAC,IAAI;AACf,UAAI,CAACc,OAAL,EACC;AAEDV,MAAAA,GAAG,CAACiB,SAAJ,GAAgB,EAAhB;AACAjB,MAAAA,GAAG,CAACkB,OAAJ,GAAc,OAAd;AACAlB,MAAAA,GAAG,CAACmB,UAAJ,GAAiB,CAAjB;AACAnB,MAAAA,GAAG,CAACoB,aAAJ,GAAoB,CAApB;AACApB,MAAAA,GAAG,CAACqB,aAAJ,GAAoB,CAApB;AACArB,MAAAA,GAAG,CAACsB,WAAJ,GAAkB,oBAAlB;AACAtB,MAAAA,GAAG,CAACuB,MAAJ,CAAW3B,CAAC,CAAC4B,OAAF,GAAYtB,MAAM,CAACuB,UAA9B,EAA0C7B,CAAC,CAAC8B,OAAF,GAAYxB,MAAM,CAACyB,SAA7D;AACA3B,MAAAA,GAAG,CAAC4B,MAAJ;AAEA,KAbD;;AAeA1B,IAAAA,MAAM,CAAC2B,gBAAP,CAAwB,WAAxB,EAAqClB,YAArC;AACAT,IAAAA,MAAM,CAAC2B,gBAAP,CAAwB,SAAxB,EAAmCjB,UAAnC;AACAV,IAAAA,MAAM,CAAC2B,gBAAP,CAAwB,WAAxB,EAAqCb,IAArC;AAEA;;AAODc,EAAAA,MAAM,GAAG;AACR,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACP;AAAQ,MAAA,EAAE,EAAC,YAAX;AAAwB,MAAA,KAAK,EAAC,KAA9B;AAAoC,MAAA,MAAM,EAAC,KAA3C;AAAiD,MAAA,GAAG,EAAC,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDADO,EAIP;AAAQ,MAAA,EAAE,EAAC,aAAX;AAAyB,MAAA,OAAO,EAAE,KAAK/B,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJO,CAAR;AAMA;;AArF0C","sourcesContent":["import React from 'react'\nimport {loadModel,predict} from './Main'\nvar tf = require('@tensorflow/tfjs')\n\nlet model = null\nlet uri = window.location.href + 'modelJS/model.json'\n\nexport class Canvas extends React.Component {\n\n\tloadModel = async () => {\n\t\ttry{\n\t\t\treturn await tf.loadLayersModel(uri)\n\t\t}catch(e){\n\t\t\tconsole.log(e)\n\t\t}\n\t\t// console.log(model)\n\t}\n\n\tcomponentDidMount() {\n\n\t\t// const {canvasHeight, canvasWidth} = this.state.canvasDims\n\t\t// this.refs.canvas.height = canvasHeight\n\t\t// this.refs.canvas.width = canvasWidth\n\n\n\t\tthis.setupCanvas()\n\t\tmodel = loadModel()\n\t\tconsole.log(model);\n\n\n\t}\n\n\tcomponentDidUpdate() {\n\t\t// const {canvasHeight, canvasWidth} = this.state.canvasDims\n\t\t// this.refs.canvas.height = canvasHeight\n\t\t// this.refs.canvas.width = canvasWidth\n\n\t\tthis.setupCanvas()\n\t}\n\n\tsetupCanvas() {\n\t\tconst canvas = this.refs.canvas\n\t\tconst ctx = canvas.getContext('2d')\n\n\t\tlet penDown = false\n\n\t\tlet startDrawing = () => {\n\t\t\tpenDown = true\n\t\t}\n\n\t\tlet endDrawing = () => {\n\t\t\tpenDown = false\n\t\t\tctx.beginPath()\n\n\t\t\tlet imageData = ctx.getImageData(0,0,canvas.width,canvas.height)\n\t\t\tpredict(model,imageData)\n\n\t\t}\n\n\t\tlet draw = e => {\n\t\t\tif (!penDown)\n\t\t\t\treturn\n\n\t\t\tctx.lineWidth = 15\n\t\t\tctx.lineCap = 'round'\n\t\t\tctx.shadowBlur = 2;\n\t\t\tctx.shadowOffsetX = 5;\n\t\t\tctx.shadowOffsetY = 3;\n\t\t\tctx.shadowColor = \"rgba(0, 0, 0, 0.5)\";\n\t\t\tctx.lineTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n\t\t\tctx.stroke()\n\n\t\t}\n\n\t\tcanvas.addEventListener('mousedown', startDrawing)\n\t\tcanvas.addEventListener('mouseup', endDrawing)\n\t\tcanvas.addEventListener('mousemove', draw)\n\n\t}\n\n\tclearCanvas = () => {\n\t\tconst ctx = this.refs.canvas.getContext('2d')\n\t\tctx.clearRect(0, 0, this.refs.canvas.width, this.refs.canvas.height)\n\t}\n\n\trender() {\n\t\treturn (<div>\n\t\t\t<canvas id=\"drawCanvas\" width=\"500\" height=\"500\" ref=\"canvas\">\n\t\t\t\tSorry your browser does not support canvas\n\t\t\t</canvas>\n\t\t\t<button id=\"clearButton\" onClick={this.clearCanvas}>Clear</button>\n\t\t</div>)\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}