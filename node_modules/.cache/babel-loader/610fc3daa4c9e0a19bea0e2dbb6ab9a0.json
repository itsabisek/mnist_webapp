{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util = require(\"./util\");\n\nfunction getFilteredNodesXToY(tape, xs, y) {\n  var tensorsFromX = {};\n  var nodesFromX = {};\n\n  for (var i = 0; i < xs.length; i++) {\n    tensorsFromX[xs[i].id] = true;\n  }\n\n  for (var i = 0; i < tape.length; i++) {\n    var node = tape[i];\n    var nodeInputs = node.inputs;\n\n    for (var inputName in nodeInputs) {\n      var input = nodeInputs[inputName];\n      var anyInputFromX = false;\n\n      for (var j = 0; j < xs.length; j++) {\n        if (tensorsFromX[input.id]) {\n          tensorsFromX[node.output.id] = true;\n          anyInputFromX = true;\n          nodesFromX[node.id] = true;\n          break;\n        }\n      }\n\n      if (anyInputFromX) {\n        break;\n      }\n    }\n  }\n\n  var tensorsLeadToY = {};\n  tensorsLeadToY[y.id] = true;\n  var nodesToY = {};\n\n  for (var i = tape.length - 1; i >= 0; i--) {\n    var node = tape[i];\n    var nodeInputs = node.inputs;\n    var outputs = [];\n    outputs.push(node.output);\n\n    for (var j = 0; j < outputs.length; j++) {\n      if (tensorsLeadToY[outputs[j].id]) {\n        for (var inputName in nodeInputs) {\n          tensorsLeadToY[nodeInputs[inputName].id] = true;\n          nodesToY[node.id] = true;\n        }\n\n        break;\n      }\n    }\n  }\n\n  var filteredTape = [];\n\n  for (var i = 0; i < tape.length; i++) {\n    var node = tape[i];\n\n    if (nodesFromX[node.id] && nodesToY[node.id]) {\n      var prunedInputs = {};\n\n      for (var inputName in node.inputs) {\n        var nodeInput = node.inputs[inputName];\n\n        if (tensorsFromX[nodeInput.id]) {\n          prunedInputs[inputName] = nodeInput;\n        }\n      }\n\n      var prunedNode = Object.assign({}, node);\n      prunedNode.inputs = prunedInputs;\n      prunedNode.output = node.output;\n      filteredTape.push(prunedNode);\n    }\n  }\n\n  return filteredTape;\n}\n\nexports.getFilteredNodesXToY = getFilteredNodesXToY;\n\nfunction backpropagateGradients(tensorAccumulatedGradientMap, filteredTape) {\n  for (var i = filteredTape.length - 1; i >= 0; i--) {\n    var node = filteredTape[i];\n    var dy = tensorAccumulatedGradientMap[node.output.id];\n\n    if (node.gradient == null) {\n      throw new Error(\"Cannot compute gradient: gradient function not found \" + (\"for \" + node.name + \".\"));\n    }\n\n    var inputGradients = node.gradient(dy);\n\n    for (var inputName in node.inputs) {\n      if (!(inputName in inputGradients)) {\n        throw new Error(\"Cannot backprop through input \" + inputName + \". \" + (\"Available gradients found: \" + Object.keys(inputGradients) + \".\"));\n      }\n\n      var dx = inputGradients[inputName]();\n      var x = node.inputs[inputName];\n\n      if (!util.arraysEqual(dx.shape, x.shape)) {\n        throw new Error(\"Error in gradient for op \" + node.name + \". The gradient of input \" + (\"'\" + inputName + \"' has shape '\" + dx.shape + \"', which does not match \") + (\"the shape of the input '\" + x.shape + \"'\"));\n      }\n\n      if (tensorAccumulatedGradientMap[x.id] == null) {\n        tensorAccumulatedGradientMap[x.id] = dx;\n      } else {\n        var curGradient = tensorAccumulatedGradientMap[x.id];\n        tensorAccumulatedGradientMap[x.id] = curGradient.add(dx);\n        curGradient.dispose();\n      }\n    }\n  }\n}\n\nexports.backpropagateGradients = backpropagateGradients;","map":null,"metadata":{},"sourceType":"script"}