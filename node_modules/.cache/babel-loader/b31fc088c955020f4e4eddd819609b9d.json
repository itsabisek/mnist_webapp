{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar shader_compiler_1 = require(\"./shader_compiler\");\n\nvar ReverseProgram = function () {\n  function ReverseProgram(xShape, axis) {\n    this.variableNames = ['x'];\n    var rank = xShape.length;\n\n    if (rank > 4) {\n      throw new Error(\"WebGL backend: Reverse of rank-\" + rank + \" tensor is not yet supported\");\n    }\n\n    this.outputShape = xShape;\n\n    if (rank === 1) {\n      this.userCode = \"\\n        void main() {\\n          int coord = getOutputCoords();\\n          setOutput(getX(\" + xShape[0] + \" - coord - 1));\\n        }\\n      \";\n      return;\n    }\n\n    var getInCoord = function getInCoord(i) {\n      if (axis.indexOf(i) !== -1 && xShape[i] !== 1) {\n        return xShape[i] + \" - coords[\" + i + \"] - 1\";\n      }\n\n      return \"coords[\" + i + \"]\";\n    };\n\n    var inCoords = xShape.map(function (_, i) {\n      return getInCoord(i);\n    }).join(',');\n    var type = shader_compiler_1.getCoordsDataType(rank);\n    this.userCode = \"\\n      void main() {\\n        \" + type + \" coords = getOutputCoords();\\n        setOutput(getX(\" + inCoords + \"));\\n      }\\n    \";\n  }\n\n  return ReverseProgram;\n}();\n\nexports.ReverseProgram = ReverseProgram;","map":null,"metadata":{},"sourceType":"script"}