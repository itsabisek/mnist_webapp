{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar doc_1 = require(\"../doc\");\n\nvar environment_1 = require(\"../environment\");\n\nvar util = require(\"../util\");\n\nvar operation_1 = require(\"./operation\");\n\nvar LRNOps = function () {\n  function LRNOps() {}\n\n  LRNOps.localResponseNormalization = function (x, radius, bias, alpha, beta) {\n    if (radius === void 0) {\n      radius = 5;\n    }\n\n    if (bias === void 0) {\n      bias = 1;\n    }\n\n    if (alpha === void 0) {\n      alpha = 1;\n    }\n\n    if (beta === void 0) {\n      beta = 0.5;\n    }\n\n    util.assertArgumentsAreTensors({\n      x: x\n    }, 'localResponseNormalization');\n    util.assert(x.rank === 4 || x.rank === 3, \"Error in localResponseNormalization: x must be rank 3 or 4 but got\\n               rank \" + x.rank + \".\");\n    util.assert(util.isInt(radius), \"Error in localResponseNormalization3D: radius must be an integer\\n                     but got radius \" + radius + \".\");\n    var x4D = x;\n    var reshapedTo4D = false;\n\n    if (x.rank === 3) {\n      reshapedTo4D = true;\n      x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n    }\n\n    var res = environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.localResponseNormalization4D(x4D, radius, bias, alpha, beta);\n    }, {\n      x4D: x4D\n    });\n\n    if (reshapedTo4D) {\n      return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n    } else {\n      return res;\n    }\n  };\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Normalization'\n  }), operation_1.operation], LRNOps, \"localResponseNormalization\", null);\n\n  return LRNOps;\n}();\n\nexports.LRNOps = LRNOps;","map":null,"metadata":{},"sourceType":"script"}