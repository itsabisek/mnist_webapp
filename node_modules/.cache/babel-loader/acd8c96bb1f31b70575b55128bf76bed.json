{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar errors_1 = require(\"./errors\");\n\nvar generic_utils_1 = require(\"./utils/generic_utils\");\n\nvar nameMap = new Map();\ngeneric_utils_1.SerializableEnumRegistry.register('data_format', {\n  'channels_first': 'channelsFirst',\n  'channels_last': 'channelsLast'\n});\nexports.VALID_DATA_FORMAT_VALUES = ['channelsFirst', 'channelsLast', undefined, null];\n\nfunction checkDataFormat(value) {\n  if (value == null) {\n    return;\n  }\n\n  if (exports.VALID_DATA_FORMAT_VALUES.indexOf(value) < 0) {\n    throw new errors_1.ValueError(value + \" is not a valid DataFormat.  Valid values as \" + exports.VALID_DATA_FORMAT_VALUES);\n  }\n}\n\nexports.checkDataFormat = checkDataFormat;\ngeneric_utils_1.SerializableEnumRegistry.register('padding', {\n  'valid': 'valid',\n  'same': 'same',\n  'casual': 'casual'\n});\nexports.VALID_PADDING_MODE_VALUES = ['valid', 'same', 'casual', undefined, null];\n\nfunction checkPaddingMode(value) {\n  if (value == null) {\n    return;\n  }\n\n  if (exports.VALID_PADDING_MODE_VALUES.indexOf(value) < 0) {\n    throw new errors_1.ValueError(value + \" is not a valid PaddingMode.  Valid values as \" + exports.VALID_PADDING_MODE_VALUES);\n  }\n}\n\nexports.checkPaddingMode = checkPaddingMode;\nexports.VALID_POOL_MODE_VALUES = ['max', 'avg', undefined, null];\n\nfunction checkPoolMode(value) {\n  if (value == null) {\n    return;\n  }\n\n  if (exports.VALID_POOL_MODE_VALUES.indexOf(value) < 0) {\n    throw new errors_1.ValueError(value + \" is not a valid PoolMode.  Valid values as \" + exports.VALID_POOL_MODE_VALUES);\n  }\n}\n\nexports.checkPoolMode = checkPoolMode;\nvar _nameScopeStack = [];\nvar _nameScopeDivider = '/';\n\nfunction nameScope(name, fn) {\n  _nameScopeStack.push(name);\n\n  try {\n    var val = fn();\n\n    _nameScopeStack.pop();\n\n    return val;\n  } catch (e) {\n    _nameScopeStack.pop();\n\n    throw e;\n  }\n}\n\nexports.nameScope = nameScope;\n\nfunction currentNameScopePrefix() {\n  if (_nameScopeStack.length === 0) {\n    return '';\n  } else {\n    return _nameScopeStack.join(_nameScopeDivider) + _nameScopeDivider;\n  }\n}\n\nfunction getScopedTensorName(tensorName) {\n  if (!isValidTensorName(tensorName)) {\n    throw new Error('Not a valid tensor name: \\'' + tensorName + '\\'');\n  }\n\n  return currentNameScopePrefix() + tensorName;\n}\n\nexports.getScopedTensorName = getScopedTensorName;\n\nfunction getUniqueTensorName(scopedName) {\n  if (!isValidTensorName(scopedName)) {\n    throw new Error('Not a valid tensor name: \\'' + scopedName + '\\'');\n  }\n\n  if (!nameMap.has(scopedName)) {\n    nameMap.set(scopedName, 0);\n  }\n\n  var index = nameMap.get(scopedName);\n  nameMap.set(scopedName, nameMap.get(scopedName) + 1);\n\n  if (index > 0) {\n    var result = scopedName + '_' + index;\n    nameMap.set(result, 1);\n    return result;\n  } else {\n    return scopedName;\n  }\n}\n\nexports.getUniqueTensorName = getUniqueTensorName;\nvar tensorNameRegex = new RegExp(/^[A-Za-z][A-Za-z0-9\\._\\/]*$/);\n\nfunction isValidTensorName(name) {\n  return name.match(tensorNameRegex) ? true : false;\n}\n\nexports.isValidTensorName = isValidTensorName;","map":null,"metadata":{},"sourceType":"script"}