{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar doc_1 = require(\"../doc\");\n\nvar environment_1 = require(\"../environment\");\n\nvar util = require(\"../util\");\n\nvar broadcast_util = require(\"./broadcast_util\");\n\nvar operation_1 = require(\"./operation\");\n\nvar CompareOps = function () {\n  function CompareOps() {}\n\n  CompareOps.notEqual = function (a, b) {\n    util.assertArgumentsAreTensors({\n      a: a,\n      b: b\n    }, 'notEqual');\n    util.assertTypesMatch(a, b);\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    return environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.notEqual(a, b);\n    }, {\n      a: a,\n      b: b\n    });\n  };\n\n  CompareOps.notEqualStrict = function (a, b) {\n    util.assertShapesMatch(a.shape, b.shape, 'Error in notEqualStrict: ');\n    return a.notEqual(b);\n  };\n\n  CompareOps.less = function (a, b) {\n    util.assertArgumentsAreTensors({\n      a: a,\n      b: b\n    }, 'less');\n    util.assertTypesMatch(a, b);\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    return environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.less(a, b);\n    }, {\n      a: a,\n      b: b\n    });\n  };\n\n  CompareOps.lessStrict = function (a, b) {\n    util.assertShapesMatch(a.shape, b.shape, 'Error in lessStrict: ');\n    return a.less(b);\n  };\n\n  CompareOps.equal = function (a, b) {\n    util.assertArgumentsAreTensors({\n      a: a,\n      b: b\n    }, 'equal');\n    util.assertTypesMatch(a, b);\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    return environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.equal(a, b);\n    }, {\n      a: a,\n      b: b\n    });\n  };\n\n  CompareOps.equalStrict = function (a, b) {\n    util.assertShapesMatch(a.shape, b.shape, 'Error in equalStrict: ');\n    return a.equal(b);\n  };\n\n  CompareOps.lessEqual = function (a, b) {\n    util.assertArgumentsAreTensors({\n      a: a,\n      b: b\n    }, 'lessEqual');\n    util.assertTypesMatch(a, b);\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    return environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.lessEqual(a, b);\n    }, {\n      a: a,\n      b: b\n    });\n  };\n\n  CompareOps.lessEqualStrict = function (a, b) {\n    util.assertShapesMatch(a.shape, b.shape, 'Error in lessEqualStrict: ');\n    return a.lessEqual(b);\n  };\n\n  CompareOps.greater = function (a, b) {\n    util.assertArgumentsAreTensors({\n      a: a,\n      b: b\n    }, 'greater');\n    util.assertTypesMatch(a, b);\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    return environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.greater(a, b);\n    }, {\n      a: a,\n      b: b\n    });\n  };\n\n  CompareOps.greaterStrict = function (a, b) {\n    util.assertShapesMatch(a.shape, b.shape, 'Error in greaterStrict: ');\n    return a.greater(b);\n  };\n\n  CompareOps.greaterEqual = function (a, b) {\n    util.assertArgumentsAreTensors({\n      a: a,\n      b: b\n    }, 'greaterEqual');\n    util.assertTypesMatch(a, b);\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    return environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.greaterEqual(a, b);\n    }, {\n      a: a,\n      b: b\n    });\n  };\n\n  CompareOps.greaterEqualStrict = function (a, b) {\n    util.assertShapesMatch(a.shape, b.shape, 'Error in greaterEqualStrict: ');\n    return a.greaterEqual(b);\n  };\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Logical'\n  }), operation_1.operation], CompareOps, \"notEqual\", null);\n\n  __decorate([operation_1.operation], CompareOps, \"notEqualStrict\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Logical'\n  }), operation_1.operation], CompareOps, \"less\", null);\n\n  __decorate([operation_1.operation], CompareOps, \"lessStrict\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Logical'\n  }), operation_1.operation], CompareOps, \"equal\", null);\n\n  __decorate([operation_1.operation], CompareOps, \"equalStrict\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Logical'\n  }), operation_1.operation], CompareOps, \"lessEqual\", null);\n\n  __decorate([operation_1.operation], CompareOps, \"lessEqualStrict\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Logical'\n  }), operation_1.operation], CompareOps, \"greater\", null);\n\n  __decorate([operation_1.operation], CompareOps, \"greaterStrict\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Logical'\n  }), operation_1.operation], CompareOps, \"greaterEqual\", null);\n\n  __decorate([operation_1.operation], CompareOps, \"greaterEqualStrict\", null);\n\n  return CompareOps;\n}();\n\nexports.CompareOps = CompareOps;","map":null,"metadata":{},"sourceType":"script"}