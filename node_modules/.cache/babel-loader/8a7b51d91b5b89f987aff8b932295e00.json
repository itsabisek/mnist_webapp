{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar util = require(\"../util\");\n\nfunction axesAreInnerMostDims(axes, rank) {\n  for (var i = 0; i < axes.length; ++i) {\n    if (axes[axes.length - i - 1] !== rank - 1 - i) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nexports.axesAreInnerMostDims = axesAreInnerMostDims;\n\nfunction combineLocations(outputLoc, reduceLoc, axes) {\n  var rank = outputLoc.length + reduceLoc.length;\n  var loc = [];\n  var outIdx = 0;\n  var reduceIdx = 0;\n\n  for (var dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      loc.push(outputLoc[outIdx++]);\n    } else {\n      loc.push(reduceLoc[reduceIdx++]);\n    }\n  }\n\n  return loc;\n}\n\nexports.combineLocations = combineLocations;\n\nfunction computeOutAndReduceShapes(aShape, axes) {\n  var outShape = [];\n  var rank = aShape.length;\n\n  for (var dim = 0; dim < rank; dim++) {\n    if (axes.indexOf(dim) === -1) {\n      outShape.push(aShape[dim]);\n    }\n  }\n\n  var reduceShape = axes.map(function (dim) {\n    return aShape[dim];\n  });\n  return [outShape, reduceShape];\n}\n\nexports.computeOutAndReduceShapes = computeOutAndReduceShapes;\n\nfunction expandShapeToKeepDim(shape, axes) {\n  var reduceSubShape = axes.map(function (x) {\n    return 1;\n  });\n  return combineLocations(shape, reduceSubShape, axes);\n}\n\nexports.expandShapeToKeepDim = expandShapeToKeepDim;\n\nfunction parseAxisParam(axis, shape) {\n  var rank = shape.length;\n  axis = axis == null ? shape.map(function (s, i) {\n    return i;\n  }) : [].concat(axis);\n  util.assert(axis.every(function (ax) {\n    return ax >= -rank && ax < rank;\n  }), \"All values in axis param must be in range [-\" + rank + \", \" + rank + \") but \" + (\"got axis \" + axis));\n  util.assert(axis.every(function (ax) {\n    return util.isInt(ax);\n  }), \"All values in axis param must be integers but \" + (\"got axis \" + axis));\n  return axis.map(function (a) {\n    return a < 0 ? rank + a : a;\n  });\n}\n\nexports.parseAxisParam = parseAxisParam;\n\nfunction assertAxesAreInnerMostDims(msg, axes, rank) {\n  util.assert(axesAreInnerMostDims(axes, rank), msg + \" supports only inner-most axes for now. \" + (\"Got axes \" + axes + \" and rank-\" + rank + \" input.\"));\n}\n\nexports.assertAxesAreInnerMostDims = assertAxesAreInnerMostDims;\n\nfunction getAxesPermutation(axes, rank) {\n  if (axesAreInnerMostDims(axes, rank)) {\n    return null;\n  }\n\n  var result = [];\n\n  for (var i = 0; i < rank; ++i) {\n    if (axes.indexOf(i) === -1) {\n      result.push(i);\n    }\n  }\n\n  axes.forEach(function (axis) {\n    return result.push(axis);\n  });\n  return result;\n}\n\nexports.getAxesPermutation = getAxesPermutation;\n\nfunction getUndoAxesPermutation(axes) {\n  return axes.map(function (axis, i) {\n    return [i, axis];\n  }).sort(function (a, b) {\n    return a[1] - b[1];\n  }).map(function (x) {\n    return x[0];\n  });\n}\n\nexports.getUndoAxesPermutation = getUndoAxesPermutation;\n\nfunction getInnerMostAxes(numAxes, rank) {\n  var res = [];\n\n  for (var i = rank - numAxes; i < rank; ++i) {\n    res.push(i);\n  }\n\n  return res;\n}\n\nexports.getInnerMostAxes = getInnerMostAxes;","map":null,"metadata":{},"sourceType":"script"}