{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar doc_1 = require(\"../doc\");\n\nvar environment_1 = require(\"../environment\");\n\nvar util = require(\"../util\");\n\nvar operation_1 = require(\"./operation\");\n\nvar slice_util = require(\"./slice_util\");\n\nvar SliceOps = function () {\n  function SliceOps() {}\n\n  SliceOps.slice1d = function (x, begin, size) {\n    util.assert(x.rank === 1, \"slice1d expects a rank-1 tensor, but got a rank-\" + x.rank + \" tensor\");\n    return SliceOps.slice(x, [begin], [size]);\n  };\n\n  SliceOps.slice2d = function (x, begin, size) {\n    util.assert(x.rank === 2, \"slice1d expects a rank-2 tensor, but got a rank-\" + x.rank + \" tensor\");\n    return SliceOps.slice(x, begin, size);\n  };\n\n  SliceOps.slice3d = function (x, begin, size) {\n    util.assert(x.rank === 3, \"slice1d expects a rank-3 tensor, but got a rank-\" + x.rank + \" tensor\");\n    return SliceOps.slice(x, begin, size);\n  };\n\n  SliceOps.slice4d = function (x, begin, size) {\n    util.assert(x.rank === 4, \"slice1d expects a rank-4 tensor, but got a rank-\" + x.rank + \" tensor\");\n    return SliceOps.slice(x, begin, size);\n  };\n\n  SliceOps.slice = function (x, begin, size) {\n    util.assertArgumentsAreTensors({\n      x: x\n    }, 'slice');\n\n    if (x.rank === 0) {\n      throw new Error('Slicing scalar is not possible');\n    }\n\n    var begin_;\n\n    if (typeof begin === 'number') {\n      begin_ = [begin].concat(new Array(x.rank - 1).fill(0));\n    } else if (begin.length < x.rank) {\n      begin_ = begin.concat(new Array(x.rank - begin.length).fill(0));\n    } else {\n      begin_ = begin;\n    }\n\n    var size_;\n\n    if (size == null) {\n      size_ = new Array(x.rank).fill(-1);\n    } else if (typeof size === 'number') {\n      size_ = [size].concat(new Array(x.rank - 1).fill(-1));\n    } else if (size.length < x.rank) {\n      size_ = size.concat(new Array(x.rank - size.length).fill(-1));\n    } else {\n      size_ = size;\n    }\n\n    size_ = size_.map(function (d, i) {\n      if (d >= 0) {\n        return d;\n      } else {\n        util.assert(d === -1, 'Bad value in size');\n        return x.shape[i] - begin_[i];\n      }\n    });\n    slice_util.assertParamsValid(x, begin_, size_);\n    var inputShape = x.shape;\n\n    var grad = function grad(dy) {\n      var paddings = [];\n\n      for (var i = 0; i < dy.rank; i++) {\n        paddings.push([begin_[i], inputShape[i] - begin_[i] - size_[i]]);\n      }\n\n      return {\n        x: function x() {\n          return dy.pad(paddings);\n        }\n      };\n    };\n\n    return environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.slice(x, begin_, size_);\n    }, {\n      x: x\n    }, grad);\n  };\n\n  __decorate([doc_1.doc({\n    heading: 'Tensors',\n    subheading: 'Slicing and Joining'\n  }), operation_1.operation], SliceOps, \"slice\", null);\n\n  return SliceOps;\n}();\n\nexports.SliceOps = SliceOps;","map":null,"metadata":{},"sourceType":"script"}