{"ast":null,"code":"var _jsxFileName = \"/home/abisek/Python/DL/heroku-apps/mnist_webapp/mnist-webapp/src/components/DrawCanvas.js\";\nimport React from 'react'; // import {predict} from './Main'\n\nimport { PlotChart } from './PlotChart';\n\nvar tf = require('@tensorflow/tfjs');\n\nlet model = null;\nlet uri = window.location.href + 'modelJS/model.json';\nexport class Canvas extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.clearCanvas = () => {\n      const ctx = this.refs.canvas.getContext('2d');\n      ctx.clearRect(0, 0, this.refs.canvas.width, this.refs.canvas.height);\n      PlotChart.updateChart([0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);\n    };\n  }\n\n  async loadModel() {\n    try {\n      model = await tf.loadLayersModel(uri);\n      console.log(model);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  componentDidMount() {\n    // const {canvasHeight, canvasWidth} = this.state.canvasDims\n    // this.refs.canvas.height = canvasHeight\n    // this.refs.canvas.width = canvasWidth\n    this.loadModel();\n    this.setupCanvas();\n  }\n\n  componentDidUpdate() {\n    // const {canvasHeight, canvasWidth} = this.state.canvasDims\n    // this.refs.canvas.height = canvasHeight\n    // this.refs.canvas.width = canvasWidth\n    this.setupCanvas();\n  }\n\n  setupCanvas() {\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext('2d');\n    let penDown = false;\n\n    let startDrawing = () => {\n      penDown = true;\n    };\n\n    let endDrawing = () => {\n      penDown = false;\n      ctx.beginPath();\n      ctx.drawImage(canvas, 0, 0, 28, 28); // const imageData = ctx.getImageData(0,0,28,28)\n\n      let data = tf.browser.fromPixels(ctx.getImageData(0, 0, 28, 28), 1);\n      console.log(\"image shape\"); // let arr = Array.from(data.dataSync())\n      // console.log(arr.includes(0));\n      // tf.browser.toPixels(data,this.refs.showCanvas)\n      // imageData = tf.browser.fromPixels(imageData,1)\n      // // imageData  = tf.image.resizeNearestNeighbor(imageData,[28,28])\n      // tf.browser.toPixels(imageData,this.refs.showCanvas)\n      // imageData = tf.expandDims(imageData)\n      // console.log(imageData);\n\n      this.predict(model, data); // PlotChart.updateChart(predictions)\n    };\n\n    let draw = e => {\n      if (!penDown) return;\n      ctx.lineWidth = 15;\n      ctx.lineCap = 'round';\n      ctx.shadowBlur = 2;\n      ctx.shadowOffsetX = 5;\n      ctx.shadowOffsetY = 3; // ctx.shadowColor = \"rgba(0, 0, 0, 0.5)\";\n\n      ctx.lineTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n      ctx.stroke();\n    };\n\n    canvas.addEventListener('mousedown', startDrawing);\n    canvas.addEventListener('mouseup', endDrawing);\n    canvas.addEventListener('mousemove', draw);\n  }\n\n  async predict(model, data) {\n    let predictions = null;\n    const pred = await tf.tidy(() => {\n      // let data = tf.browser.fromPixels(imageData,1)\n      // data = data.reshape([1,28,28,1])\n      data = tf.expandDims(data);\n      data = tf.cast(data, \"float32\");\n      predictions = model.predict(data);\n      return Array.from(predictions.dataSync());\n    }); // let data = tf.browser.fromPixels(imageData,1)\n    // data = tf.image.resizeNearestNeighbor(data,[28,28])\n    // data = tf.expandDims(data)\n    // console.log(pred);\n\n    PlotChart.updateChart(pred);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"drawCanvas\",\n      width: \"500\",\n      height: \"500\",\n      ref: \"canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 119\n      },\n      __self: this\n    }, \"Sorry your browser does not support canvas\"), React.createElement(\"button\", {\n      id: \"clearButton\",\n      onClick: this.clearCanvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \"Clear\"), React.createElement(\"canvas\", {\n      id: \"showCanvas\",\n      width: \"50\",\n      height: \"50\",\n      ref: \"showCanvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }));\n  }\n\n}","map":{"version":3,"sources":["/home/abisek/Python/DL/heroku-apps/mnist_webapp/mnist-webapp/src/components/DrawCanvas.js"],"names":["React","PlotChart","tf","require","model","uri","window","location","href","Canvas","Component","clearCanvas","ctx","refs","canvas","getContext","clearRect","width","height","updateChart","loadModel","loadLayersModel","console","log","e","componentDidMount","setupCanvas","componentDidUpdate","penDown","startDrawing","endDrawing","beginPath","drawImage","data","browser","fromPixels","getImageData","predict","draw","lineWidth","lineCap","shadowBlur","shadowOffsetX","shadowOffsetY","lineTo","clientX","offsetLeft","clientY","offsetTop","stroke","addEventListener","predictions","pred","tidy","expandDims","cast","Array","from","dataSync","render"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;;AACA,SAAQC,SAAR,QAAwB,aAAxB;;AACA,IAAIC,EAAE,GAAGC,OAAO,CAAC,kBAAD,CAAhB;;AAEA,IAAIC,KAAK,GAAG,IAAZ;AACA,IAAIC,GAAG,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,oBAAjC;AAEA,OAAO,MAAMC,MAAN,SAAqBT,KAAK,CAACU,SAA3B,CAAqC;AAAA;AAAA;;AAAA,SAsG3CC,WAtG2C,GAsG7B,MAAM;AACnB,YAAMC,GAAG,GAAG,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,UAAjB,CAA4B,IAA5B,CAAZ;AACAH,MAAAA,GAAG,CAACI,SAAJ,CAAc,CAAd,EAAiB,CAAjB,EAAoB,KAAKH,IAAL,CAAUC,MAAV,CAAiBG,KAArC,EAA4C,KAAKJ,IAAL,CAAUC,MAAV,CAAiBI,MAA7D;AACAjB,MAAAA,SAAS,CAACkB,WAAV,CAAsB,CAAC,CAAD,EAAG,CAAH,EAAK,CAAL,EAAO,CAAP,EAAS,CAAT,EAAW,CAAX,EAAa,CAAb,EAAe,CAAf,EAAiB,CAAjB,EAAmB,CAAnB,CAAtB;AACA,KA1G0C;AAAA;;AAE3C,QAAMC,SAAN,GAAiB;AAChB,QAAG;AACFhB,MAAAA,KAAK,GAAI,MAAMF,EAAE,CAACmB,eAAH,CAAmBhB,GAAnB,CAAf;AACAiB,MAAAA,OAAO,CAACC,GAAR,CAAYnB,KAAZ;AACA,KAHD,CAGC,OAAMoB,CAAN,EAAQ;AACRF,MAAAA,OAAO,CAACC,GAAR,CAAYC,CAAZ;AACA;AACD;;AAEDC,EAAAA,iBAAiB,GAAG;AAEnB;AACA;AACA;AACA,SAAKL,SAAL;AACA,SAAKM,WAAL;AACA;;AAEDC,EAAAA,kBAAkB,GAAG;AACpB;AACA;AACA;AAEA,SAAKD,WAAL;AACA;;AAEDA,EAAAA,WAAW,GAAG;AACb,UAAMZ,MAAM,GAAG,KAAKD,IAAL,CAAUC,MAAzB;AACA,UAAMF,GAAG,GAAGE,MAAM,CAACC,UAAP,CAAkB,IAAlB,CAAZ;AAEA,QAAIa,OAAO,GAAG,KAAd;;AAEA,QAAIC,YAAY,GAAG,MAAM;AACxBD,MAAAA,OAAO,GAAG,IAAV;AACA,KAFD;;AAIA,QAAIE,UAAU,GAAG,MAAM;AACtBF,MAAAA,OAAO,GAAG,KAAV;AACAhB,MAAAA,GAAG,CAACmB,SAAJ;AACAnB,MAAAA,GAAG,CAACoB,SAAJ,CAAclB,MAAd,EAAqB,CAArB,EAAuB,CAAvB,EAAyB,EAAzB,EAA4B,EAA5B,EAHsB,CAKtB;;AACA,UAAImB,IAAI,GAAG/B,EAAE,CAACgC,OAAH,CAAWC,UAAX,CAAsBvB,GAAG,CAACwB,YAAJ,CAAiB,CAAjB,EAAmB,CAAnB,EAAqB,EAArB,EAAwB,EAAxB,CAAtB,EAAkD,CAAlD,CAAX;AACAd,MAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAPsB,CAStB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,WAAKc,OAAL,CAAajC,KAAb,EAAmB6B,IAAnB,EAlBsB,CAmBtB;AACA,KApBD;;AAsBA,QAAIK,IAAI,GAAGd,CAAC,IAAI;AACf,UAAI,CAACI,OAAL,EACC;AAEDhB,MAAAA,GAAG,CAAC2B,SAAJ,GAAgB,EAAhB;AACA3B,MAAAA,GAAG,CAAC4B,OAAJ,GAAc,OAAd;AACA5B,MAAAA,GAAG,CAAC6B,UAAJ,GAAiB,CAAjB;AACA7B,MAAAA,GAAG,CAAC8B,aAAJ,GAAoB,CAApB;AACA9B,MAAAA,GAAG,CAAC+B,aAAJ,GAAoB,CAApB,CARe,CASf;;AACA/B,MAAAA,GAAG,CAACgC,MAAJ,CAAWpB,CAAC,CAACqB,OAAF,GAAY/B,MAAM,CAACgC,UAA9B,EAA0CtB,CAAC,CAACuB,OAAF,GAAYjC,MAAM,CAACkC,SAA7D;AACApC,MAAAA,GAAG,CAACqC,MAAJ;AAEA,KAbD;;AAeAnC,IAAAA,MAAM,CAACoC,gBAAP,CAAwB,WAAxB,EAAqCrB,YAArC;AACAf,IAAAA,MAAM,CAACoC,gBAAP,CAAwB,SAAxB,EAAmCpB,UAAnC;AACAhB,IAAAA,MAAM,CAACoC,gBAAP,CAAwB,WAAxB,EAAqCZ,IAArC;AAEA;;AAED,QAAMD,OAAN,CAAejC,KAAf,EAAqB6B,IAArB,EAA0B;AAEzB,QAAIkB,WAAW,GAAG,IAAlB;AAEA,UAAMC,IAAI,GAAG,MAAMlD,EAAE,CAACmD,IAAH,CAAQ,MAAM;AAChC;AACA;AACApB,MAAAA,IAAI,GAAG/B,EAAE,CAACoD,UAAH,CAAcrB,IAAd,CAAP;AACAA,MAAAA,IAAI,GAAG/B,EAAE,CAACqD,IAAH,CAAQtB,IAAR,EAAa,SAAb,CAAP;AAEAkB,MAAAA,WAAW,GAAG/C,KAAK,CAACiC,OAAN,CAAcJ,IAAd,CAAd;AACA,aAAOuB,KAAK,CAACC,IAAN,CAAWN,WAAW,CAACO,QAAZ,EAAX,CAAP;AAEA,KATkB,CAAnB,CAJyB,CAczB;AACA;AACA;AACA;;AACAzD,IAAAA,SAAS,CAACkB,WAAV,CAAsBiC,IAAtB;AACA;;AAQDO,EAAAA,MAAM,GAAG;AACR,WAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACP;AAAQ,MAAA,EAAE,EAAC,YAAX;AAAwB,MAAA,KAAK,EAAC,KAA9B;AAAoC,MAAA,MAAM,EAAC,KAA3C;AAAiD,MAAA,GAAG,EAAC,QAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDADO,EAIP;AAAQ,MAAA,EAAE,EAAC,aAAX;AAAyB,MAAA,OAAO,EAAE,KAAKhD,WAAvC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAJO,EAKP;AAAQ,MAAA,EAAE,EAAC,YAAX;AAAwB,MAAA,KAAK,EAAC,IAA9B;AAAmC,MAAA,MAAM,EAAG,IAA5C;AAAiD,MAAA,GAAG,EAAC,YAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MALO,CAAR;AAOA;;AApH0C","sourcesContent":["import React from 'react'\n// import {predict} from './Main'\nimport {PlotChart} from './PlotChart'\nvar tf = require('@tensorflow/tfjs')\n\nlet model = null\nlet uri = window.location.href + 'modelJS/model.json'\n\nexport class Canvas extends React.Component {\n\n\tasync loadModel(){\n\t\ttry{\n\t\t\tmodel =  await tf.loadLayersModel(uri)\n\t\t\tconsole.log(model);\n\t\t}catch(e){\n\t\t\tconsole.log(e)\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\n\t\t// const {canvasHeight, canvasWidth} = this.state.canvasDims\n\t\t// this.refs.canvas.height = canvasHeight\n\t\t// this.refs.canvas.width = canvasWidth\n\t\tthis.loadModel()\n\t\tthis.setupCanvas()\n\t}\n\n\tcomponentDidUpdate() {\n\t\t// const {canvasHeight, canvasWidth} = this.state.canvasDims\n\t\t// this.refs.canvas.height = canvasHeight\n\t\t// this.refs.canvas.width = canvasWidth\n\n\t\tthis.setupCanvas()\n\t}\n\n\tsetupCanvas() {\n\t\tconst canvas = this.refs.canvas\n\t\tconst ctx = canvas.getContext('2d')\n\n\t\tlet penDown = false\n\n\t\tlet startDrawing = () => {\n\t\t\tpenDown = true\n\t\t}\n\n\t\tlet endDrawing = () => {\n\t\t\tpenDown = false\n\t\t\tctx.beginPath()\n\t\t\tctx.drawImage(canvas,0,0,28,28)\n\n\t\t\t// const imageData = ctx.getImageData(0,0,28,28)\n\t\t\tlet data = tf.browser.fromPixels(ctx.getImageData(0,0,28,28),1)\n\t\t\tconsole.log(\"image shape\");\n\t\t\t\n\t\t\t// let arr = Array.from(data.dataSync())\n\t\t\t// console.log(arr.includes(0));\n\t\t\t// tf.browser.toPixels(data,this.refs.showCanvas)\n\t\t\t// imageData = tf.browser.fromPixels(imageData,1)\n\t\t\t// // imageData  = tf.image.resizeNearestNeighbor(imageData,[28,28])\n\t\t\t// tf.browser.toPixels(imageData,this.refs.showCanvas)\n\t\t\t// imageData = tf.expandDims(imageData)\n\t\t\t// console.log(imageData);\n\n\t\t\tthis.predict(model,data)\n\t\t\t// PlotChart.updateChart(predictions)\n\t\t}\n\n\t\tlet draw = e => {\n\t\t\tif (!penDown)\n\t\t\t\treturn\n\n\t\t\tctx.lineWidth = 15\n\t\t\tctx.lineCap = 'round'\n\t\t\tctx.shadowBlur = 2;\n\t\t\tctx.shadowOffsetX = 5;\n\t\t\tctx.shadowOffsetY = 3;\n\t\t\t// ctx.shadowColor = \"rgba(0, 0, 0, 0.5)\";\n\t\t\tctx.lineTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n\t\t\tctx.stroke()\n\n\t\t}\n\n\t\tcanvas.addEventListener('mousedown', startDrawing)\n\t\tcanvas.addEventListener('mouseup', endDrawing)\n\t\tcanvas.addEventListener('mousemove', draw)\n\n\t}\n\n\tasync predict (model,data){\n\n\t\tlet predictions = null\n\n\t\tconst pred = await tf.tidy(() => {\n\t\t\t// let data = tf.browser.fromPixels(imageData,1)\n\t\t\t// data = data.reshape([1,28,28,1])\n\t\t\tdata = tf.expandDims(data)\n\t\t\tdata = tf.cast(data,\"float32\")\n\n\t\t\tpredictions = model.predict(data)\n\t\t\treturn Array.from(predictions.dataSync())\n\n\t\t})\n\t\t// let data = tf.browser.fromPixels(imageData,1)\n\t\t// data = tf.image.resizeNearestNeighbor(data,[28,28])\n\t\t// data = tf.expandDims(data)\n\t\t// console.log(pred);\n\t\tPlotChart.updateChart(pred)\n\t}\n\n\tclearCanvas = () => {\n\t\tconst ctx = this.refs.canvas.getContext('2d')\n\t\tctx.clearRect(0, 0, this.refs.canvas.width, this.refs.canvas.height)\n\t\tPlotChart.updateChart([0,0,0,0,0,0,0,0,0,0])\n\t}\n\n\trender() {\n\t\treturn (<div>\n\t\t\t<canvas id=\"drawCanvas\" width=\"500\" height=\"500\" ref=\"canvas\">\n\t\t\t\tSorry your browser does not support canvas\n\t\t\t</canvas>\n\t\t\t<button id=\"clearButton\" onClick={this.clearCanvas}>Clear</button>\n\t\t\t<canvas id=\"showCanvas\" width=\"50\" height = \"50\" ref=\"showCanvas\"></canvas>\n\t\t</div>)\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}