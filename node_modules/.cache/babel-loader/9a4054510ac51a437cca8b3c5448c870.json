{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar environment_1 = require(\"../environment\");\n\nvar globals_1 = require(\"../globals\");\n\nvar ops_1 = require(\"../ops/ops\");\n\nvar optimizer_1 = require(\"./optimizer\");\n\nvar RMSPropOptimizer = function (_super) {\n  __extends(RMSPropOptimizer, _super);\n\n  function RMSPropOptimizer(learningRate, decay, momentum, epsilon, centered) {\n    if (decay === void 0) {\n      decay = 0.9;\n    }\n\n    if (momentum === void 0) {\n      momentum = 0.0;\n    }\n\n    if (epsilon === void 0) {\n      epsilon = 1e-8;\n    }\n\n    if (centered === void 0) {\n      centered = false;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.learningRate = learningRate;\n    _this.accumulatedMeanSquares = {};\n    _this.accumulatedMeanGrads = {};\n    _this.accumulatedMoments = {};\n    _this.c = globals_1.keep(ops_1.scalar(learningRate));\n    _this.epsilon = globals_1.keep(ops_1.scalar(epsilon));\n    _this.decay = globals_1.keep(ops_1.scalar(decay));\n    _this.momentum = globals_1.keep(ops_1.scalar(momentum));\n    _this.oneMinusDecay = globals_1.keep(ops_1.scalar(1 - decay));\n    _this.centered = centered;\n    return _this;\n  }\n\n  RMSPropOptimizer.prototype.applyGradients = function (variableGradients) {\n    var _this = this;\n\n    var _loop_1 = function _loop_1(variableName) {\n      var value = environment_1.ENV.engine.registeredVariables[variableName];\n\n      if (this_1.accumulatedMeanSquares[variableName] == null) {\n        var trainable_1 = false;\n        globals_1.tidy(function () {\n          _this.accumulatedMeanSquares[variableName] = ops_1.zerosLike(value).variable(trainable_1);\n        });\n      }\n\n      if (this_1.accumulatedMeanGrads[variableName] == null && this_1.centered) {\n        var trainable_2 = false;\n        globals_1.tidy(function () {\n          _this.accumulatedMeanGrads[variableName] = ops_1.zerosLike(value).variable(trainable_2);\n        });\n      }\n\n      if (this_1.accumulatedMoments[variableName] == null) {\n        var trainable_3 = false;\n        globals_1.tidy(function () {\n          _this.accumulatedMoments[variableName] = ops_1.zerosLike(value).variable(trainable_3);\n        });\n      }\n\n      var accumulatedMeanSquare = this_1.accumulatedMeanSquares[variableName];\n      var accumulatedMeanGrad = this_1.accumulatedMeanGrads[variableName];\n      var accumulatedMoments = this_1.accumulatedMoments[variableName];\n      var gradient = variableGradients[variableName];\n      globals_1.tidy(function () {\n        var newAccumulatedMeanSquare = _this.decay.mul(accumulatedMeanSquare).add(_this.oneMinusDecay.mul(gradient.square()));\n\n        if (_this.centered) {\n          var newAccumulatedMeanGrad = _this.decay.mul(accumulatedMeanGrad).add(_this.oneMinusDecay.mul(gradient));\n\n          var newAccumulatedMoments = _this.momentum.mul(accumulatedMoments).add(_this.c.mul(gradient).div(newAccumulatedMeanSquare.sub(newAccumulatedMeanGrad.square().add(_this.epsilon)).sqrt()));\n\n          _this.accumulatedMeanSquares[variableName].assign(newAccumulatedMeanSquare);\n\n          _this.accumulatedMeanGrads[variableName].assign(newAccumulatedMeanGrad);\n\n          _this.accumulatedMoments[variableName].assign(newAccumulatedMoments);\n\n          var newValue = value.sub(newAccumulatedMoments);\n          value.assign(newValue);\n        } else {\n          var newAccumulatedMeanSquare_1 = _this.decay.mul(accumulatedMeanSquare).add(_this.oneMinusDecay.mul(gradient.square()));\n\n          var newAccumulatedMoments = _this.momentum.mul(accumulatedMoments).add(_this.c.mul(gradient).div(newAccumulatedMeanSquare_1.add(_this.epsilon).sqrt()));\n\n          _this.accumulatedMeanSquares[variableName].assign(newAccumulatedMeanSquare_1);\n\n          _this.accumulatedMoments[variableName].assign(newAccumulatedMoments);\n\n          var newValue = value.sub(newAccumulatedMoments);\n          value.assign(newValue);\n        }\n      });\n    };\n\n    var this_1 = this;\n\n    for (var variableName in variableGradients) {\n      _loop_1(variableName);\n    }\n  };\n\n  RMSPropOptimizer.prototype.dispose = function () {\n    var _this = this;\n\n    this.c.dispose();\n    this.epsilon.dispose();\n    this.decay.dispose();\n    this.momentum.dispose();\n    this.oneMinusDecay.dispose();\n\n    if (this.accumulatedMeanSquares != null) {\n      Object.keys(this.accumulatedMeanSquares).forEach(function (name) {\n        return _this.accumulatedMeanSquares[name].dispose();\n      });\n    }\n\n    if (this.accumulatedMeanGrads != null && this.centered) {\n      Object.keys(this.accumulatedMeanGrads).forEach(function (name) {\n        return _this.accumulatedMeanGrads[name].dispose();\n      });\n    }\n\n    if (this.accumulatedMoments != null) {\n      Object.keys(this.accumulatedMoments).forEach(function (name) {\n        return _this.accumulatedMoments[name].dispose();\n      });\n    }\n  };\n\n  return RMSPropOptimizer;\n}(optimizer_1.Optimizer);\n\nexports.RMSPropOptimizer = RMSPropOptimizer;","map":null,"metadata":{},"sourceType":"script"}