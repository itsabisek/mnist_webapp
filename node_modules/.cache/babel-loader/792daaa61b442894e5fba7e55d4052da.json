{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar K = require(\"../backend/tfjs_backend\");\n\nvar constraints_1 = require(\"../constraints\");\n\nvar errors_1 = require(\"../errors\");\n\nvar initializers_1 = require(\"../initializers\");\n\nvar regularizers_1 = require(\"../regularizers\");\n\nvar conv_utils_1 = require(\"../utils/conv_utils\");\n\nvar generic_utils = require(\"../utils/generic_utils\");\n\nvar generic_utils_1 = require(\"../utils/generic_utils\");\n\nvar convolutional_1 = require(\"./convolutional\");\n\nvar DepthwiseConv2D = function (_super) {\n  __extends(DepthwiseConv2D, _super);\n\n  function DepthwiseConv2D(config) {\n    var _this = _super.call(this, config) || this;\n\n    _this.depthwiseKernel = null;\n    _this.depthMultiplier = config.depthMultiplier == null ? 1 : config.depthMultiplier;\n    _this.depthwiseInitializer = initializers_1.getInitializer(config.depthwiseInitializer || _this.DEFAULT_KERNEL_INITIALIZER);\n    _this.depthwiseConstraint = constraints_1.getConstraint(config.depthwiseConstraint);\n    _this.depthwiseRegularizer = regularizers_1.getRegularizer(config.depthwiseRegularizer);\n    return _this;\n  }\n\n  DepthwiseConv2D.prototype.getClassName = function () {\n    return 'DepthwiseConv2D';\n  };\n\n  DepthwiseConv2D.prototype.build = function (inputShape) {\n    inputShape = generic_utils_1.getExactlyOneShape(inputShape);\n\n    if (inputShape.length < 4) {\n      throw new errors_1.ValueError(\"Inputs to DepthwiseConv2D should have rank 4. \" + (\"Received input shape: \" + JSON.stringify(inputShape) + \".\"));\n    }\n\n    var channelAxis = this.dataFormat === 'channelsFirst' ? 1 : 3;\n\n    if (inputShape[channelAxis] == null || inputShape[channelAxis] < 0) {\n      throw new errors_1.ValueError('The channel dimension of the inputs to DepthwiseConv2D should ' + (\"be defined, but is not (\" + inputShape[channelAxis] + \").\"));\n    }\n\n    var inputDim = inputShape[channelAxis];\n    var depthwiseKernelShape = [this.kernelSize[0], this.kernelSize[1], inputDim, this.depthMultiplier];\n    this.depthwiseKernel = this.addWeight('depthwise_kernel', depthwiseKernelShape, null, this.depthwiseInitializer, this.depthwiseRegularizer, true, this.depthwiseConstraint);\n\n    if (this.useBias) {\n      this.bias = this.addWeight('bias', [inputDim * this.depthMultiplier], null, this.biasInitializer, this.biasRegularizer, true, this.biasConstraint);\n    } else {\n      this.bias = null;\n    }\n\n    this.built = true;\n  };\n\n  DepthwiseConv2D.prototype.call = function (inputs, kwargs) {\n    inputs = generic_utils_1.getExactlyOneTensor(inputs);\n    var outputs = K.depthwiseConv2d(inputs, this.depthwiseKernel.read(), this.strides, this.padding, this.dataFormat, null);\n\n    if (this.useBias) {\n      outputs = K.biasAdd(outputs, this.bias.read(), this.dataFormat);\n    }\n\n    if (this.activation != null) {\n      outputs = this.activation(outputs);\n    }\n\n    return outputs;\n  };\n\n  DepthwiseConv2D.prototype.computeOutputShape = function (inputShape) {\n    inputShape = generic_utils_1.getExactlyOneShape(inputShape);\n    var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    var outFilters = this.dataFormat === 'channelsFirst' ? inputShape[1] * this.depthMultiplier : inputShape[3] * this.depthMultiplier;\n    var outRows = conv_utils_1.convOutputLength(rows, this.kernelSize[0], this.padding, this.strides[0]);\n    var outCols = conv_utils_1.convOutputLength(cols, this.kernelSize[1], this.padding, this.strides[1]);\n\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], outFilters, outRows, outCols];\n    } else {\n      return [inputShape[0], outRows, outCols, outFilters];\n    }\n  };\n\n  return DepthwiseConv2D;\n}(convolutional_1.Conv2D);\n\nexports.DepthwiseConv2D = DepthwiseConv2D;\ngeneric_utils.ClassNameMap.register('DepthwiseConv2D', DepthwiseConv2D);","map":null,"metadata":{},"sourceType":"script"}