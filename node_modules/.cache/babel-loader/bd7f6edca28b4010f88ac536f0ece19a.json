{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar doc_1 = require(\"../doc\");\n\nvar environment_1 = require(\"../environment\");\n\nvar util = require(\"../util\");\n\nvar array_ops_1 = require(\"./array_ops\");\n\nvar broadcast_util_1 = require(\"./broadcast_util\");\n\nvar operation_1 = require(\"./operation\");\n\nvar ops_1 = require(\"./ops\");\n\nvar BatchNormOps = function () {\n  function BatchNormOps() {}\n\n  BatchNormOps.batchNormalization2d = function (x, mean, variance, varianceEpsilon, scale, offset) {\n    if (varianceEpsilon === void 0) {\n      varianceEpsilon = .001;\n    }\n\n    util.assert(x.rank === 2, \"Error in batchNormalization3D: x must be rank 3 but got rank \" + (x.rank + \".\"));\n    util.assert(mean.rank === 2 || mean.rank === 1, \"Error in batchNormalization2D: mean must be rank 2 or rank 1 but \" + (\"got rank \" + mean.rank + \".\"));\n    util.assert(variance.rank === 2 || variance.rank === 1, \"Error in batchNormalization2D: variance must be rank 2 or rank 1 \" + (\"but got rank \" + variance.rank + \".\"));\n\n    if (scale != null) {\n      util.assert(scale.rank === 2 || scale.rank === 1, \"Error in batchNormalization2D: scale must be rank 2 or rank 1 \" + (\"but got rank \" + scale.rank + \".\"));\n    }\n\n    if (offset != null) {\n      util.assert(offset.rank === 2 || offset.rank === 1, \"Error in batchNormalization2D: offset must be rank 2 or rank 1 \" + (\"but got rank \" + offset.rank + \".\"));\n    }\n\n    return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\n  };\n\n  BatchNormOps.batchNormalization3d = function (x, mean, variance, varianceEpsilon, scale, offset) {\n    if (varianceEpsilon === void 0) {\n      varianceEpsilon = .001;\n    }\n\n    util.assert(x.rank === 3, \"Error in batchNormalization3D: x must be rank 3 but got rank \" + (x.rank + \".\"));\n    util.assert(mean.rank === 3 || mean.rank === 1, \"Error in batchNormalization3D: mean must be rank 3 or rank 1 but \" + (\"got rank \" + mean.rank + \".\"));\n    util.assert(variance.rank === 3 || variance.rank === 1, \"Error in batchNormalization3D: variance must be rank 3 or rank 1 \" + (\"but got rank \" + variance.rank + \".\"));\n\n    if (scale != null) {\n      util.assert(scale.rank === 3 || scale.rank === 1, \"Error in batchNormalization3D: scale must be rank 3 or rank 1 \" + (\"but got rank \" + scale.rank + \".\"));\n    }\n\n    if (offset != null) {\n      util.assert(offset.rank === 3 || offset.rank === 1, \"Error in batchNormalization3D: offset must be rank 3 or rank 1 \" + (\"but got rank \" + offset.rank + \".\"));\n    }\n\n    return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\n  };\n\n  BatchNormOps.batchNormalization4d = function (x, mean, variance, varianceEpsilon, scale, offset) {\n    if (varianceEpsilon === void 0) {\n      varianceEpsilon = .001;\n    }\n\n    util.assert(x.rank === 4, \"Error in batchNormalization4D: x must be rank 4 but got rank \" + (x.rank + \".\"));\n    util.assert(mean.rank === 4 || mean.rank === 1, \"Error in batchNormalization4D: mean must be rank 4 or rank 1 but \" + (\"got rank \" + mean.rank + \".\"));\n    util.assert(variance.rank === 4 || variance.rank === 1, \"Error in batchNormalization4D: variance must be rank 4 or rank 1 \" + (\"but got rank \" + variance.rank + \".\"));\n\n    if (scale != null) {\n      util.assert(scale.rank === 4 || scale.rank === 1, \"Error in batchNormalization4D: scale must be rank 4 or rank 1 \" + (\"but got rank \" + scale.rank + \".\"));\n    }\n\n    if (offset != null) {\n      util.assert(offset.rank === 4 || offset.rank === 1, \"Error in batchNormalization4D: offset must be rank 4 or rank 1 \" + (\"but got rank \" + offset.rank + \".\"));\n    }\n\n    return BatchNormOps.batchNormalization(x, mean, variance, varianceEpsilon, scale, offset);\n  };\n\n  BatchNormOps.batchNormalization = function (x, mean, variance, varianceEpsilon, scale, offset) {\n    if (varianceEpsilon === void 0) {\n      varianceEpsilon = .001;\n    }\n\n    util.assertArgumentsAreTensors({\n      x: x,\n      mean: mean,\n      variance: variance\n    }, 'batchNormalization');\n\n    if (scale != null) {\n      util.assertArgumentsAreTensors({\n        scale: scale\n      }, 'batchNormalization');\n    }\n\n    if (offset != null) {\n      util.assertArgumentsAreTensors({\n        offset: offset\n      }, 'batchNormalization');\n    }\n\n    util.assert(mean.rank === variance.rank, 'Batch normalization gradient requires mean and variance to have ' + 'equal ranks.');\n    util.assert(offset == null || mean.rank === offset.rank, 'Batch normalization gradient requires mean and offset to have ' + 'equal ranks.');\n    util.assert(scale == null || mean.rank === scale.rank, 'Batch normalization gradient requires mean and scale to have ' + 'equal ranks.');\n    var x4D;\n\n    if (x.rank === 0 || x.rank === 1) {\n      x4D = x.as4D(1, 1, 1, x.size);\n    } else if (x.rank === 2) {\n      x4D = x.as4D(1, 1, x.shape[0], x.shape[1]);\n    } else if (x.rank === 3) {\n      x4D = x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n    } else {\n      x4D = x;\n    }\n\n    var der = function der(dy) {\n      var scaleValue = scale == null ? array_ops_1.ArrayOps.scalar(1) : scale;\n      var reductionAxes = broadcast_util_1.getReductionAxes(mean.shape, x4D.shape);\n      var tileShape = [];\n\n      if (mean.rank === 1) {\n        for (var i = 0; i < x4D.shape.length - 1; ++i) {\n          tileShape.push(x4D.shape[i]);\n        }\n\n        tileShape.push(1);\n      }\n\n      var xMinusMean = x.sub(mean);\n      var dyTimesScaleValue = dy.mul(scaleValue);\n      var oneOverSqrtVariance = ops_1.rsqrt(variance.add(array_ops_1.ArrayOps.scalar(varianceEpsilon)));\n      var minusHalfRCube = oneOverSqrtVariance.mul(oneOverSqrtVariance).mul(oneOverSqrtVariance).mul(array_ops_1.ArrayOps.scalar(-0.5));\n\n      var derX = function derX() {\n        if (mean.rank === 1) {\n          return dy.mul(array_ops_1.ArrayOps.tile(oneOverSqrtVariance.as4D(1, 1, 1, mean.shape[0]), tileShape)).mul(scaleValue).reshape(x.shape);\n        } else {\n          return dy.mul(oneOverSqrtVariance).mul(scaleValue).reshape(x.shape);\n        }\n      };\n\n      var derMean = function derMean() {\n        var meanDer = oneOverSqrtVariance.mul(array_ops_1.ArrayOps.scalar(-1)).mul(dyTimesScaleValue);\n\n        if (mean.rank === 1) {\n          meanDer = meanDer.sum(reductionAxes);\n        }\n\n        return meanDer.reshape(mean.shape);\n      };\n\n      var derVariance = function derVariance() {\n        var varianceDer = minusHalfRCube.mul(xMinusMean).mul(dyTimesScaleValue);\n\n        if (mean.rank === 1) {\n          varianceDer = varianceDer.sum(reductionAxes);\n        }\n\n        return varianceDer.reshape(mean.shape);\n      };\n\n      var derScale = function derScale() {\n        var xMinusMean2TimesRsqrt = xMinusMean.mul(oneOverSqrtVariance);\n        var scaleDer = dy.mul(xMinusMean2TimesRsqrt);\n\n        if (mean.rank === 1) {\n          scaleDer = scaleDer.sum(reductionAxes);\n        }\n\n        return scaleDer.reshape(mean.shape);\n      };\n\n      var derOffset = function derOffset() {\n        var offsetDer = dy;\n\n        if (mean.rank === 1) {\n          offsetDer = offsetDer.sum(reductionAxes);\n        }\n\n        return offsetDer.reshape(mean.shape);\n      };\n\n      return {\n        x: derX,\n        mean: derMean,\n        variance: derVariance,\n        scale: derScale,\n        offset: derOffset\n      };\n    };\n\n    var res = environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.batchNormalization(x4D, batchnormReshape4D(mean), batchnormReshape4D(variance), varianceEpsilon, batchnormReshape4D(scale), batchnormReshape4D(offset));\n    }, {\n      x: x,\n      mean: mean,\n      variance: variance,\n      scale: scale,\n      offset: offset\n    }, der);\n    return res.reshape(x.shape);\n  };\n\n  __decorate([operation_1.operation], BatchNormOps, \"batchNormalization2d\", null);\n\n  __decorate([operation_1.operation], BatchNormOps, \"batchNormalization3d\", null);\n\n  __decorate([operation_1.operation], BatchNormOps, \"batchNormalization4d\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Normalization'\n  })], BatchNormOps, \"batchNormalization\", null);\n\n  return BatchNormOps;\n}();\n\nexports.BatchNormOps = BatchNormOps;\n\nfunction batchnormReshape4D(x) {\n  if (x == null) {\n    return null;\n  }\n\n  if (x.rank === 0) {\n    return x.as1D();\n  } else if (x.rank === 1) {\n    return x;\n  } else if (x.rank === 2) {\n    return x.as4D(1, 1, x.shape[0], x.shape[1]);\n  } else if (x.rank === 3) {\n    return x.as4D(1, x.shape[0], x.shape[1], x.shape[2]);\n  }\n\n  return x;\n}","map":null,"metadata":{},"sourceType":"script"}