{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\n\nvar K = require(\"./backend/tfjs_backend\");\n\nvar common_1 = require(\"./common\");\n\nvar errors_1 = require(\"./errors\");\n\nvar types_1 = require(\"./types\");\n\nvar generic_utils_1 = require(\"./utils/generic_utils\");\n\nvar math_utils_1 = require(\"./utils/math_utils\");\n\ngeneric_utils_1.SerializableEnumRegistry.register('mode', {\n  'fan_in': 'fanIn',\n  'fan_out': 'fanOut',\n  'fan_avg': 'fanAvg'\n});\nexports.VALID_FAN_MODE_VALUES = ['fanIn', 'fanOut', 'fanAvg', undefined, null];\n\nfunction checkFanMode(value) {\n  if (value == null) {\n    return;\n  }\n\n  if (exports.VALID_FAN_MODE_VALUES.indexOf(value) < 0) {\n    throw new errors_1.ValueError(value + \" is not a valid FanMode.  Valid values as \" + exports.VALID_FAN_MODE_VALUES);\n  }\n}\n\nexports.checkFanMode = checkFanMode;\ngeneric_utils_1.SerializableEnumRegistry.register('distribution', {\n  'normal': 'normal',\n  'uniform': 'uniform'\n});\nexports.VALID_DISTRIBUTION_VALUES = ['normal', 'uniform', undefined, null];\n\nfunction checkDistribution(value) {\n  if (value == null) {\n    return;\n  }\n\n  if (exports.VALID_DISTRIBUTION_VALUES.indexOf(value) < 0) {\n    throw new errors_1.ValueError(value + \" is not a valid Distribution.  Valid values as \" + exports.VALID_DISTRIBUTION_VALUES);\n  }\n}\n\nexports.checkDistribution = checkDistribution;\n\nvar Initializer = function (_super) {\n  __extends(Initializer, _super);\n\n  function Initializer() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Initializer.fromConfig = function (cls, config) {\n    return new cls(config);\n  };\n\n  Initializer.prototype.fromConfigUsesCustomObjects = function () {\n    return false;\n  };\n\n  Initializer.prototype.getConfig = function () {\n    return {};\n  };\n\n  Initializer = __decorate([tfjs_core_1.doc({\n    heading: 'Initializers',\n    subheading: 'Classes',\n    namespace: 'initializers'\n  })], Initializer);\n  return Initializer;\n}(types_1.Serializable);\n\nexports.Initializer = Initializer;\n\nvar Zeros = function (_super) {\n  __extends(Zeros, _super);\n\n  function Zeros() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Zeros.prototype.getClassName = function () {\n    return 'Zeros';\n  };\n\n  Zeros.prototype.apply = function (shape, dtype) {\n    return K.zeros(shape, dtype);\n  };\n\n  return Zeros;\n}(Initializer);\n\nexports.Zeros = Zeros;\ngeneric_utils_1.ClassNameMap.register('Zeros', Zeros);\n\nvar Ones = function (_super) {\n  __extends(Ones, _super);\n\n  function Ones() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  Ones.prototype.getClassName = function () {\n    return 'Ones';\n  };\n\n  Ones.prototype.apply = function (shape, dtype) {\n    return K.ones(shape, dtype);\n  };\n\n  return Ones;\n}(Initializer);\n\nexports.Ones = Ones;\ngeneric_utils_1.ClassNameMap.register('Ones', Ones);\n\nvar Constant = function (_super) {\n  __extends(Constant, _super);\n\n  function Constant(config) {\n    var _this = _super.call(this) || this;\n\n    _this.value = config.value;\n    return _this;\n  }\n\n  Constant.prototype.apply = function (shape, dtype) {\n    return K.scalarTimesArray(tfjs_core_1.scalar(this.value), K.ones(shape, dtype));\n  };\n\n  Constant.prototype.getClassName = function () {\n    return 'Constant';\n  };\n\n  Constant.prototype.getConfig = function () {\n    return {\n      value: this.value\n    };\n  };\n\n  return Constant;\n}(Initializer);\n\nexports.Constant = Constant;\ngeneric_utils_1.ClassNameMap.register('Constant', Constant);\n\nvar RandomUniform = function (_super) {\n  __extends(RandomUniform, _super);\n\n  function RandomUniform(config) {\n    var _this = _super.call(this) || this;\n\n    _this.DEFAULT_MINVAL = -0.05;\n    _this.DEFAULT_MAXVAL = 0.05;\n    _this.minval = config.minval || _this.DEFAULT_MINVAL;\n    _this.maxval = config.maxval || _this.DEFAULT_MAXVAL;\n    _this.seed = config.seed;\n    return _this;\n  }\n\n  RandomUniform.prototype.apply = function (shape, dtype) {\n    return K.randomUniform(shape, this.minval, this.maxval, dtype, this.seed);\n  };\n\n  RandomUniform.prototype.getClassName = function () {\n    return 'RandomUniform';\n  };\n\n  RandomUniform.prototype.getConfig = function () {\n    return {\n      minval: this.minval,\n      maxval: this.maxval,\n      seed: this.seed\n    };\n  };\n\n  return RandomUniform;\n}(Initializer);\n\nexports.RandomUniform = RandomUniform;\ngeneric_utils_1.ClassNameMap.register('RandomUniform', RandomUniform);\n\nvar RandomNormal = function (_super) {\n  __extends(RandomNormal, _super);\n\n  function RandomNormal(config) {\n    var _this = _super.call(this) || this;\n\n    _this.DEFAULT_MEAN = 0.;\n    _this.DEFAULT_STDDEV = 0.05;\n    _this.mean = config.mean || _this.DEFAULT_MEAN;\n    _this.stddev = config.stddev || _this.DEFAULT_STDDEV;\n    _this.seed = config.seed;\n    return _this;\n  }\n\n  RandomNormal.prototype.apply = function (shape, dtype) {\n    return K.randomNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  };\n\n  RandomNormal.prototype.getClassName = function () {\n    return 'RandomNormal';\n  };\n\n  RandomNormal.prototype.getConfig = function () {\n    return {\n      mean: this.mean,\n      stddev: this.stddev,\n      seed: this.seed\n    };\n  };\n\n  return RandomNormal;\n}(Initializer);\n\nexports.RandomNormal = RandomNormal;\ngeneric_utils_1.ClassNameMap.register('RandomNormal', RandomNormal);\n\nvar TruncatedNormal = function (_super) {\n  __extends(TruncatedNormal, _super);\n\n  function TruncatedNormal(config) {\n    var _this = _super.call(this) || this;\n\n    _this.DEFAULT_MEAN = 0.;\n    _this.DEFAULT_STDDEV = 0.05;\n    _this.mean = config.mean || _this.DEFAULT_MEAN;\n    _this.stddev = config.stddev || _this.DEFAULT_STDDEV;\n    _this.seed = config.seed;\n    return _this;\n  }\n\n  TruncatedNormal.prototype.apply = function (shape, dtype) {\n    return K.truncatedNormal(shape, this.mean, this.stddev, dtype, this.seed);\n  };\n\n  TruncatedNormal.prototype.getClassName = function () {\n    return 'TruncatedNormal';\n  };\n\n  TruncatedNormal.prototype.getConfig = function () {\n    return {\n      mean: this.mean,\n      stddev: this.stddev,\n      seed: this.seed\n    };\n  };\n\n  return TruncatedNormal;\n}(Initializer);\n\nexports.TruncatedNormal = TruncatedNormal;\ngeneric_utils_1.ClassNameMap.register('TruncatedNormal', TruncatedNormal);\n\nvar Identity = function (_super) {\n  __extends(Identity, _super);\n\n  function Identity(config) {\n    var _this = _super.call(this) || this;\n\n    _this.gain = config.gain != null ? tfjs_core_1.scalar(config.gain) : K.getScalar(1.0);\n    return _this;\n  }\n\n  Identity.prototype.apply = function (shape, dtype) {\n    if (shape.length !== 2 || shape[0] !== shape[1]) {\n      throw new errors_1.ValueError('Identity matrix initializer can only be used for' + ' 2D square matrices.');\n    } else {\n      return K.scalarTimesArray(this.gain, K.eye(shape[0]));\n    }\n  };\n\n  Identity.prototype.getClassName = function () {\n    return 'Identity';\n  };\n\n  Identity.prototype.getConfig = function () {\n    return {\n      gain: this.gain.get()\n    };\n  };\n\n  return Identity;\n}(Initializer);\n\nexports.Identity = Identity;\ngeneric_utils_1.ClassNameMap.register('Identity', Identity);\n\nfunction computeFans(shape, dataFormat) {\n  if (dataFormat === void 0) {\n    dataFormat = 'channelsLast';\n  }\n\n  var fanIn;\n  var fanOut;\n  common_1.checkDataFormat(dataFormat);\n\n  if (shape.length === 2) {\n    fanIn = shape[0];\n    fanOut = shape[1];\n  } else if ([3, 4, 5].indexOf(shape.length) !== -1) {\n    if (dataFormat === 'channelsFirst') {\n      var receptiveFieldSize = math_utils_1.arrayProd(shape, 2);\n      fanIn = shape[1] * receptiveFieldSize;\n      fanOut = shape[0] * receptiveFieldSize;\n    } else if (dataFormat === 'channelsLast') {\n      var receptiveFieldSize = math_utils_1.arrayProd(shape, 0, shape.length - 2);\n      fanIn = shape[shape.length - 2] * receptiveFieldSize;\n      fanOut = shape[shape.length - 1] * receptiveFieldSize;\n    }\n  } else {\n    var shapeProd = math_utils_1.arrayProd(shape);\n    fanIn = Math.sqrt(shapeProd);\n    fanOut = Math.sqrt(shapeProd);\n  }\n\n  return [fanIn, fanOut];\n}\n\nvar VarianceScaling = function (_super) {\n  __extends(VarianceScaling, _super);\n\n  function VarianceScaling(config) {\n    var _this = _super.call(this) || this;\n\n    if (config.scale < 0.0) {\n      throw new errors_1.ValueError(\"scale must be a positive float. Got: \" + config.scale);\n    }\n\n    _this.scale = config.scale == null ? 1.0 : config.scale;\n    _this.mode = config.mode;\n    checkFanMode(_this.mode);\n    _this.distribution = config.distribution;\n    checkDistribution(_this.distribution);\n    _this.seed = config.seed;\n    return _this;\n  }\n\n  VarianceScaling.prototype.apply = function (shape, dtype) {\n    var fans = computeFans(shape);\n    var fanIn = fans[0];\n    var fanOut = fans[1];\n    var scale = this.scale;\n\n    if (this.mode === 'fanIn') {\n      scale /= Math.max(1, fanIn);\n    } else if (this.mode === 'fanOut') {\n      scale /= Math.max(1, fanOut);\n    } else {\n      scale /= Math.max(1, (fanIn + fanOut) / 2);\n    }\n\n    if (this.distribution === 'normal') {\n      var stddev = Math.sqrt(scale);\n      return K.truncatedNormal(shape, 0, stddev, dtype, this.seed);\n    } else {\n      var limit = Math.sqrt(3 * scale);\n      return K.randomUniform(shape, -limit, limit, dtype, this.seed);\n    }\n  };\n\n  VarianceScaling.prototype.getClassName = function () {\n    return 'VarianceScaling';\n  };\n\n  VarianceScaling.prototype.getConfig = function () {\n    return {\n      scale: this.scale,\n      mode: this.mode,\n      distribution: this.distribution,\n      seed: this.seed\n    };\n  };\n\n  return VarianceScaling;\n}(Initializer);\n\nexports.VarianceScaling = VarianceScaling;\ngeneric_utils_1.ClassNameMap.register('VarianceScaling', VarianceScaling);\n\nvar GlorotUniform = function (_super) {\n  __extends(GlorotUniform, _super);\n\n  function GlorotUniform(config) {\n    return _super.call(this, {\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'uniform',\n      seed: config.seed\n    }) || this;\n  }\n\n  return GlorotUniform;\n}(VarianceScaling);\n\nexports.GlorotUniform = GlorotUniform;\ngeneric_utils_1.ClassNameMap.register('GlorotUniform', GlorotUniform);\n\nvar GlorotNormal = function (_super) {\n  __extends(GlorotNormal, _super);\n\n  function GlorotNormal(config) {\n    return _super.call(this, {\n      scale: 1.0,\n      mode: 'fanAvg',\n      distribution: 'normal',\n      seed: config.seed\n    }) || this;\n  }\n\n  return GlorotNormal;\n}(VarianceScaling);\n\nexports.GlorotNormal = GlorotNormal;\ngeneric_utils_1.ClassNameMap.register('GlorotNormal', GlorotNormal);\n\nvar HeNormal = function (_super) {\n  __extends(HeNormal, _super);\n\n  function HeNormal(config) {\n    return _super.call(this, {\n      scale: 2.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: config.seed\n    }) || this;\n  }\n\n  return HeNormal;\n}(VarianceScaling);\n\nexports.HeNormal = HeNormal;\ngeneric_utils_1.ClassNameMap.register('HeNormal', HeNormal);\n\nvar LeCunNormal = function (_super) {\n  __extends(LeCunNormal, _super);\n\n  function LeCunNormal(config) {\n    return _super.call(this, {\n      scale: 1.0,\n      mode: 'fanIn',\n      distribution: 'normal',\n      seed: config.seed\n    }) || this;\n  }\n\n  return LeCunNormal;\n}(VarianceScaling);\n\nexports.LeCunNormal = LeCunNormal;\ngeneric_utils_1.ClassNameMap.register('LeCunNormal', LeCunNormal);\n\nvar Orthogonal = function (_super) {\n  __extends(Orthogonal, _super);\n\n  function Orthogonal(config) {\n    var _this = _super.call(this) || this;\n\n    _this.DEFAULT_GAIN = 1;\n    _this.gain = config.gain == null ? _this.DEFAULT_GAIN : config.gain;\n    _this.seed = config.seed;\n\n    if (_this.seed != null) {\n      throw new errors_1.NotImplementedError('Random seed is not implemented for Orthogonal Initializer yet.');\n    }\n\n    return _this;\n  }\n\n  Orthogonal.prototype.apply = function (shape, dtype) {\n    if (shape.length !== 2) {\n      throw new errors_1.NotImplementedError('The Orthogonal Initializer does not support non-2D shapes yet.');\n    }\n\n    var normalizedShape = shape[0] >= shape[1] ? shape : [shape[1], shape[0]];\n    var a = K.randomNormal(normalizedShape, 0, 1, types_1.DType.float32);\n    var q = K.qr(a)[0];\n\n    if (q.shape[1] > normalizedShape[1]) {\n      q = q.slice([0, 0], normalizedShape);\n    }\n\n    if (shape[0] < shape[1]) {\n      q = q.transpose();\n    }\n\n    return K.scalarTimesArray(K.getScalar(this.gain), q);\n  };\n\n  Orthogonal.prototype.getClassName = function () {\n    return 'Orthogonal';\n  };\n\n  Orthogonal.prototype.getConfig = function () {\n    return {\n      gain: this.gain,\n      seed: this.seed\n    };\n  };\n\n  return Orthogonal;\n}(Initializer);\n\nexports.Orthogonal = Orthogonal;\ngeneric_utils_1.ClassNameMap.register('Orthogonal', Orthogonal);\nexports.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP = {\n  'constant': 'Constant',\n  'glorotNormal': 'GlorotNormal',\n  'glorotUniform': 'GlorotUniform',\n  'heNormal': 'HeNormal',\n  'identity': 'Identity',\n  'leCunNormal': 'LeCunNormal',\n  'ones': 'Ones',\n  'orthogonal': 'Orthogonal',\n  'randomNormal': 'RandomNormal',\n  'randomUniform': 'RandomUniform',\n  'truncatedNormal': 'TruncatedNormal',\n  'varianceScaling': 'VarianceScaling',\n  'zeros': 'Zeros'\n};\n\nfunction deserializeInitializer(config, customObjects) {\n  if (customObjects === void 0) {\n    customObjects = {};\n  }\n\n  return generic_utils_1.deserializeKerasObject(config, generic_utils_1.ClassNameMap.getMap().pythonClassNameMap, customObjects, 'initializer');\n}\n\nfunction serializeInitializer(initializer) {\n  return generic_utils_1.serializeKerasObject(initializer);\n}\n\nexports.serializeInitializer = serializeInitializer;\n\nfunction getInitializer(identifier) {\n  if (typeof identifier === 'string') {\n    var className = identifier in exports.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP ? exports.INITIALIZER_IDENTIFIER_REGISTRY_SYMBOL_MAP[identifier] : identifier;\n    var config = {\n      className: className,\n      config: {}\n    };\n    return deserializeInitializer(config);\n  } else if (identifier instanceof Initializer) {\n    return identifier;\n  } else {\n    return deserializeInitializer(identifier);\n  }\n}\n\nexports.getInitializer = getInitializer;","map":null,"metadata":{},"sourceType":"script"}