{"ast":null,"code":"var tf = require('@tensorflow/tfjs'); // let uri = window.location.href + 'modelJS/model.json'\n// export const loadModel = async () => {\n// \ttry{\n// \t\treturn await tf.loadLayersModel(uri)\n// \t}catch(e){\n// \t\tconsole.log(e)\n// \t}\n// \t// console.log(model)\n// }\n\n\nexport const predict = async (model, imageData) => {\n  const pred = await tf.tidy(() => {\n    let data = tf.browser.fromPixels(imageData, 1);\n    data = data.reshape([1, 28, 28, 1]);\n    data = tf.cast(data, float32);\n  }); // let data = tf.browser.fromPixels(imageData,1)\n  // data = tf.image.resizeNearestNeighbor(data,[28,28])\n  // data = tf.expandDims(data)\n\n  const predictions = model.predict(imageData);\n  return Array.from(predictions.dataSync());\n};","map":{"version":3,"sources":["/home/abisek/Python/DL/heroku-apps/mnist_webapp/mnist-webapp/src/components/Main.js"],"names":["tf","require","predict","model","imageData","pred","tidy","data","browser","fromPixels","reshape","cast","float32","predictions","Array","from","dataSync"],"mappings":"AAAA,IAAIA,EAAE,GAAGC,OAAO,CAAC,kBAAD,CAAhB,C,CAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,OAAO,MAAMC,OAAO,GAAG,OAAOC,KAAP,EAAaC,SAAb,KAA2B;AAEjD,QAAMC,IAAI,GAAG,MAAML,EAAE,CAACM,IAAH,CAAQ,MAAM;AAChC,QAAIC,IAAI,GAAGP,EAAE,CAACQ,OAAH,CAAWC,UAAX,CAAsBL,SAAtB,EAAgC,CAAhC,CAAX;AACAG,IAAAA,IAAI,GAAGA,IAAI,CAACG,OAAL,CAAa,CAAC,CAAD,EAAG,EAAH,EAAM,EAAN,EAAS,CAAT,CAAb,CAAP;AACAH,IAAAA,IAAI,GAAGP,EAAE,CAACW,IAAH,CAAQJ,IAAR,EAAaK,OAAb,CAAP;AACA,GAJkB,CAAnB,CAFiD,CAOjD;AACA;AACA;;AACA,QAAMC,WAAW,GAAGV,KAAK,CAACD,OAAN,CAAcE,SAAd,CAApB;AACA,SAAOU,KAAK,CAACC,IAAN,CAAWF,WAAW,CAACG,QAAZ,EAAX,CAAP;AACA,CAZM","sourcesContent":["var tf = require('@tensorflow/tfjs')\n\n// let uri = window.location.href + 'modelJS/model.json'\n\n// export const loadModel = async () => {\n// \ttry{\n// \t\treturn await tf.loadLayersModel(uri)\n// \t}catch(e){\n// \t\tconsole.log(e)\n// \t}\n// \t// console.log(model)\n// }\n\n\nexport const predict = async (model,imageData) => {\n\n\tconst pred = await tf.tidy(() => {\n\t\tlet data = tf.browser.fromPixels(imageData,1)\n\t\tdata = data.reshape([1,28,28,1])\n\t\tdata = tf.cast(data,float32)\n\t})\n\t// let data = tf.browser.fromPixels(imageData,1)\n\t// data = tf.image.resizeNearestNeighbor(data,[28,28])\n\t// data = tf.expandDims(data)\n\tconst predictions = model.predict(imageData)\n\treturn Array.from(predictions.dataSync())\n}\n"]},"metadata":{},"sourceType":"module"}