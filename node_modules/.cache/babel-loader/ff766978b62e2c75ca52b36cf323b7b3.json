{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar doc_1 = require(\"./doc\");\n\nvar environment_1 = require(\"./environment\");\n\nvar globals_1 = require(\"./globals\");\n\nvar tensor_1 = require(\"./tensor\");\n\nvar util = require(\"./util\");\n\nvar Gradients = function () {\n  function Gradients() {}\n\n  Gradients.gradScope = function (nameOrScopeFn, scopeFn) {\n    return globals_1.tidy(nameOrScopeFn, scopeFn, true);\n  };\n\n  Gradients.grad = function (f) {\n    util.assert(util.isFunction(f), 'The f passed in grad(f) must be a function');\n    return function (x, dy) {\n      util.assert(x instanceof tensor_1.Tensor, 'The x passed in grad(f)(x) must be a tensor');\n      util.assert(dy == null || dy instanceof tensor_1.Tensor, 'The dy passed in grad(f)(x, dy) must be a tensor');\n\n      var _a = environment_1.ENV.engine.gradients(function () {\n        return f(x);\n      }, [x], dy),\n          value = _a.value,\n          grads = _a.grads;\n\n      if (dy != null) {\n        util.assertShapesMatch(value.shape, dy.shape, 'The shape of dy passed in grad(f)(x, dy) must match the shape ' + 'returned by f(x)');\n      }\n\n      value.dispose();\n      checkGrads(grads);\n      return grads[0];\n    };\n  };\n\n  Gradients.grads = function (f) {\n    util.assert(util.isFunction(f), 'The f passed in grads(f) must be a function');\n    return function (args, dy) {\n      util.assert(Array.isArray(args) && args.every(function (arg) {\n        return arg instanceof tensor_1.Tensor;\n      }), 'The args passed in grads(f)(args) must be an array of tensors');\n      util.assert(dy == null || dy instanceof tensor_1.Tensor, 'The dy passed in grads(f)(args, dy) must be a tensor');\n\n      var _a = environment_1.ENV.engine.gradients(function () {\n        return f.apply(void 0, args);\n      }, args, dy),\n          value = _a.value,\n          grads = _a.grads;\n\n      if (dy != null) {\n        util.assertShapesMatch(value.shape, dy.shape, 'The shape of dy passed in grads(f)([x1,...], dy) must match the ' + 'shape returned by f([x1,...])');\n      }\n\n      value.dispose();\n      checkGrads(grads);\n      return grads;\n    };\n  };\n\n  Gradients.valueAndGrad = function (f) {\n    util.assert(util.isFunction(f), 'The f passed in valueAndGrad(f) must be a function');\n    return function (x, dy) {\n      util.assert(x instanceof tensor_1.Tensor, 'The x passed in valueAndGrad(f)(x) must be a tensor');\n      util.assert(dy == null || dy instanceof tensor_1.Tensor, 'The dy passed in valueAndGrad(f)(x, dy) must be a tensor');\n\n      var _a = environment_1.ENV.engine.gradients(function () {\n        return f(x);\n      }, [x], dy),\n          grads = _a.grads,\n          value = _a.value;\n\n      checkGrads(grads);\n      return {\n        grad: grads[0],\n        value: value\n      };\n    };\n  };\n\n  Gradients.valueAndGrads = function (f) {\n    util.assert(util.isFunction(f), 'The f passed in valueAndGrads(f) must be a function');\n    return function (args, dy) {\n      util.assert(Array.isArray(args) && args.every(function (arg) {\n        return arg instanceof tensor_1.Tensor;\n      }), 'The args passed in valueAndGrads(f)(args) must be array of tensors');\n      util.assert(dy == null || dy instanceof tensor_1.Tensor, 'The dy passed in valueAndGrads(f)(args, dy) must be a tensor');\n      var res = environment_1.ENV.engine.gradients(function () {\n        return f.apply(void 0, args);\n      }, args, dy);\n\n      if (dy != null) {\n        util.assertShapesMatch(res.value.shape, dy.shape, 'The shape of dy passed in valueAndGrads(f)([x1,...], dy) must ' + 'match the shape returned by f([x1,...])');\n      }\n\n      checkGrads(res.grads);\n      return res;\n    };\n  };\n\n  Gradients.variableGrads = function (f, varList) {\n    util.assert(util.isFunction(f), 'The f passed in variableGrads(f) must be a function');\n    util.assert(varList == null || Array.isArray(varList) && varList.every(function (v) {\n      return v instanceof tensor_1.Variable;\n    }), 'The varList passed in variableGrads(f, varList) must be an array ' + 'of variables');\n\n    if (varList == null) {\n      varList = [];\n\n      for (var varName in environment_1.ENV.engine.registeredVariables) {\n        varList.push(environment_1.ENV.engine.registeredVariables[varName]);\n      }\n    }\n\n    var originalVarCount = varList.length;\n    varList = varList.filter(function (variable) {\n      return variable.trainable;\n    });\n    util.assert(varList.length > 0, \"variableGrads() expects at least one of the input variables to be \" + (\"trainable, but none of the \" + originalVarCount + \" variables is \") + \"trainable.\");\n    var allowNoGradients = true;\n\n    var _a = environment_1.ENV.engine.gradients(f, varList, null, allowNoGradients),\n        value = _a.value,\n        grads = _a.grads;\n\n    util.assert(grads.some(function (g) {\n      return g != null;\n    }), 'Cannot find a connection between any variable and the result of the ' + 'loss function y=f(x). Please make sure the operations that use ' + 'variables are inside the function f passed to minimize().');\n    util.assert(value.rank === 0, \"The f passed in variableGrads(f) must return a scalar, but it \" + (\"returned a rank-\" + value.rank + \" tensor\"));\n    var namedGrads = {};\n    varList.forEach(function (v, i) {\n      if (grads[i] != null) {\n        namedGrads[v.name] = grads[i];\n      }\n    });\n    return {\n      value: value,\n      grads: namedGrads\n    };\n  };\n\n  Gradients.customGrad = function (f) {\n    return environment_1.ENV.engine.customGrad(f);\n  };\n\n  __decorate([doc_1.doc({\n    heading: 'Training',\n    subheading: 'Gradients'\n  })], Gradients, \"grad\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Training',\n    subheading: 'Gradients'\n  })], Gradients, \"grads\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Training',\n    subheading: 'Gradients'\n  })], Gradients, \"valueAndGrad\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Training',\n    subheading: 'Gradients'\n  })], Gradients, \"valueAndGrads\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Training',\n    subheading: 'Gradients'\n  })], Gradients, \"variableGrads\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Training',\n    subheading: 'Gradients'\n  })], Gradients, \"customGrad\", null);\n\n  return Gradients;\n}();\n\nexports.Gradients = Gradients;\n\nfunction checkGrads(grads) {\n  var numNullGradients = grads.filter(function (g) {\n    return g == null;\n  }).length;\n\n  if (numNullGradients > 0) {\n    throw new Error(\"Cannot compute gradient of y=f(x) with respect to x. Make sure that\\n    the f you passed encloses all operations that lead from x to y.\");\n  }\n}","map":null,"metadata":{},"sourceType":"script"}