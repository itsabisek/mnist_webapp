{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar doc_1 = require(\"../doc\");\n\nvar environment_1 = require(\"../environment\");\n\nvar util = require(\"../util\");\n\nvar axis_util_1 = require(\"./axis_util\");\n\nvar concat_util = require(\"./concat_util\");\n\nvar operation_1 = require(\"./operation\");\n\nvar ConcatOps = function () {\n  function ConcatOps() {}\n\n  ConcatOps.concat1d = function (tensors) {\n    return ConcatOps.concat(tensors, 0);\n  };\n\n  ConcatOps.concat2d = function (tensors, axis) {\n    return ConcatOps.concat(tensors, axis);\n  };\n\n  ConcatOps.concat3d = function (tensors, axis) {\n    return ConcatOps.concat(tensors, axis);\n  };\n\n  ConcatOps.concat4d = function (tensors, axis) {\n    return ConcatOps.concat(tensors, axis);\n  };\n\n  ConcatOps.concat = function (tensors, axis) {\n    if (axis === void 0) {\n      axis = 0;\n    }\n\n    util.assert(tensors.length >= 1, 'Pass at least one tensor to concat');\n    util.assertArgumentsAreTensors({\n      tensors: tensors\n    }, 'concat');\n    var result = tensors[0];\n\n    if (tensors.length === 1) {\n      return result;\n    }\n\n    var axes = axis_util_1.parseAxisParam(axis, result.shape);\n\n    for (var i = 1; i < tensors.length; ++i) {\n      result = concat2Tensors(result, tensors[i], axes[0]);\n    }\n\n    return result;\n  };\n\n  __decorate([doc_1.doc({\n    heading: 'Tensors',\n    subheading: 'Slicing and Joining'\n  }), operation_1.operation], ConcatOps, \"concat\", null);\n\n  return ConcatOps;\n}();\n\nexports.ConcatOps = ConcatOps;\n\nfunction concat2Tensors(a, b, axis) {\n  concat_util.assertParams(a.shape, b.shape, axis);\n  var outShape = concat_util.computeOutShape(a.shape, b.shape, axis);\n  var a2D = a.as2D(-1, util.sizeFromShape(a.shape.slice(axis)));\n  var b2D = b.as2D(-1, util.sizeFromShape(b.shape.slice(axis)));\n\n  var _a = concat_util.computeGradientSliceShapes(a2D.shape, b2D.shape),\n      aBegin = _a.aBegin,\n      aSize = _a.aSize,\n      bBegin = _a.bBegin,\n      bSize = _a.bSize;\n\n  var der = function der(dy) {\n    return {\n      a: function a() {\n        return dy.slice(aBegin, aSize);\n      },\n      b: function b() {\n        return dy.slice(bBegin, bSize);\n      }\n    };\n  };\n\n  var res = environment_1.ENV.engine.runKernel(function (backend) {\n    return backend.concat(a2D, b2D);\n  }, {\n    a: a2D,\n    b: b2D\n  }, der);\n  return res.reshape(outShape);\n}","map":null,"metadata":{},"sourceType":"script"}