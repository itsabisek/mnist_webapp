{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar doc_1 = require(\"../doc\");\n\nvar environment_1 = require(\"../environment\");\n\nvar util = require(\"../util\");\n\nvar operation_1 = require(\"./operation\");\n\nvar ImageOps = function () {\n  function ImageOps() {}\n\n  ImageOps.resizeBilinear = function (images, size, alignCorners) {\n    if (alignCorners === void 0) {\n      alignCorners = false;\n    }\n\n    util.assertArgumentsAreTensors({\n      images: images\n    }, 'resizeBilinear');\n    util.assert(images.rank === 3 || images.rank === 4, \"Error in resizeBilinear: x must be rank 3 or 4, but got \" + (\"rank \" + images.rank + \".\"));\n    util.assert(size.length === 2, \"Error in resizeBilinear: new shape must 2D, but got shape \" + (size + \".\"));\n    var batchImages = images;\n    var reshapedTo4D = false;\n\n    if (images.rank === 3) {\n      reshapedTo4D = true;\n      batchImages = images.as4D(1, images.shape[0], images.shape[1], images.shape[2]);\n    }\n\n    var newHeight = size[0],\n        newWidth = size[1];\n    var res = environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.resizeBilinear(batchImages, newHeight, newWidth, alignCorners);\n    }, {\n      batchImages: batchImages\n    });\n\n    if (reshapedTo4D) {\n      return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n    }\n\n    return res;\n  };\n\n  ImageOps.resizeNearestNeighbor = function (images, size, alignCorners) {\n    if (alignCorners === void 0) {\n      alignCorners = false;\n    }\n\n    util.assertArgumentsAreTensors({\n      images: images\n    }, 'resizeNearestNeighbor');\n    util.assert(images.rank === 3 || images.rank === 4, \"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got \" + (\"rank \" + images.rank + \".\"));\n    util.assert(size.length === 2, \"Error in resizeNearestNeighbor: new shape must 2D, but got shape \" + (size + \".\"));\n    util.assert(images.dtype === 'float32' || images.dtype === 'int32', '`images` must have `int32` or `float32` as dtype');\n    var batchImages = images;\n    var reshapedTo4D = false;\n\n    if (images.rank === 3) {\n      reshapedTo4D = true;\n      batchImages = images.as4D(1, images.shape[0], images.shape[1], images.shape[2]);\n    }\n\n    var newHeight = size[0],\n        newWidth = size[1];\n    var res = environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.resizeNearestNeighbor(batchImages, newHeight, newWidth, alignCorners);\n    }, {\n      batchImages: batchImages\n    });\n\n    if (reshapedTo4D) {\n      return res.as3D(res.shape[1], res.shape[2], res.shape[3]);\n    }\n\n    return res;\n  };\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Images',\n    namespace: 'image'\n  }), operation_1.operation], ImageOps, \"resizeBilinear\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Images',\n    namespace: 'image'\n  }), operation_1.operation], ImageOps, \"resizeNearestNeighbor\", null);\n\n  return ImageOps;\n}();\n\nexports.ImageOps = ImageOps;","map":null,"metadata":{},"sourceType":"script"}