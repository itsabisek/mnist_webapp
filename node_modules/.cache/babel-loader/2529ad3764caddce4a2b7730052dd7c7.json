{"ast":null,"code":"var _jsxFileName = \"/home/abisek/Python/DL/heroku-apps/mnist_webapp/mnist-webapp/src/components/Canvas.js\";\nimport React from 'react';\nexport class Canvas extends React.Component {\n  componentDidMount() {\n    // const {canvasHeight, canvasWidth} = this.state.canvasDims\n    // this.refs.canvas.height = canvasHeight\n    // this.refs.canvas.width = canvasWidth\n    this.setupCanvas();\n  }\n\n  componentDidUpdate() {\n    // const {canvasHeight, canvasWidth} = this.state.canvasDims\n    // this.refs.canvas.height = canvasHeight\n    // this.refs.canvas.width = canvasWidth\n    this.setupCanvas();\n  }\n\n  setupCanvas() {\n    const ctx = this.refs.canvas.getContext('2d');\n    let penDown = false;\n\n    let startDrawing = () => {\n      penDown = true;\n    };\n\n    let endDrawing = () => {\n      penDown = false;\n      ctx.beginPath();\n    };\n\n    let draw = e => {\n      if (!penDown) return; // ctx.lineWidth = 5\n      // ctx.lineCap = 'round'\n\n      ctx.lineTo(e.clientX, e.clientY);\n      ctx.stroke();\n    };\n\n    this.refs.canvas.addEventListener('mousedown', startDrawing);\n    this.refs.canvas.addEventListener('mouseup', endDrawing);\n    this.refs.canvas.addEventListener('mousemove', draw);\n  }\n\n  render() {\n    var canvasStyle = {\n      \"border\": \"2px solid black\",\n      \"marginTop\": \"0\",\n      \"marginLeft\": \"0\",\n      \"marginRight\": \"90%\"\n    };\n    return React.createElement(\"div\", {\n      width: \"400\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      width: \"500\",\n      height: \"200\",\n      ref: \"canvas\",\n      style: canvasStyle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    }, \"Sorry your browser does not support canvas\"));\n  }\n\n}","map":{"version":3,"sources":["/home/abisek/Python/DL/heroku-apps/mnist_webapp/mnist-webapp/src/components/Canvas.js"],"names":["React","Canvas","Component","componentDidMount","setupCanvas","componentDidUpdate","ctx","refs","canvas","getContext","penDown","startDrawing","endDrawing","beginPath","draw","e","lineTo","clientX","clientY","stroke","addEventListener","render","canvasStyle"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,MAAMC,MAAN,SAAqBD,KAAK,CAACE,SAA3B,CAAqC;AAE3CC,EAAAA,iBAAiB,GAAG;AAEnB;AACA;AACA;AACA,SAAKC,WAAL;AACA;;AAEDC,EAAAA,kBAAkB,GAAG;AACpB;AACA;AACA;AAEA,SAAKD,WAAL;AACA;;AAEDA,EAAAA,WAAW,GAAG;AACb,UAAME,GAAG,GAAG,KAAKC,IAAL,CAAUC,MAAV,CAAiBC,UAAjB,CAA4B,IAA5B,CAAZ;AAEA,QAAIC,OAAO,GAAG,KAAd;;AAEA,QAAIC,YAAY,GAAG,MAAM;AACxBD,MAAAA,OAAO,GAAG,IAAV;AACA,KAFD;;AAIA,QAAIE,UAAU,GAAG,MAAM;AACtBF,MAAAA,OAAO,GAAG,KAAV;AACAJ,MAAAA,GAAG,CAACO,SAAJ;AACA,KAHD;;AAKA,QAAIC,IAAI,GAAGC,CAAC,IAAI;AACf,UAAI,CAACL,OAAL,EACC,OAFc,CAId;AACD;;AACAJ,MAAAA,GAAG,CAACU,MAAJ,CAAWD,CAAC,CAACE,OAAb,EAAsBF,CAAC,CAACG,OAAxB;AACAZ,MAAAA,GAAG,CAACa,MAAJ;AAEA,KATD;;AAWA,SAAKZ,IAAL,CAAUC,MAAV,CAAiBY,gBAAjB,CAAkC,WAAlC,EAA+CT,YAA/C;AACA,SAAKJ,IAAL,CAAUC,MAAV,CAAiBY,gBAAjB,CAAkC,SAAlC,EAA6CR,UAA7C;AACA,SAAKL,IAAL,CAAUC,MAAV,CAAiBY,gBAAjB,CAAkC,WAAlC,EAA+CN,IAA/C;AAEA;;AAEDO,EAAAA,MAAM,GAAG;AAER,QAAIC,WAAW,GAAG;AACjB,gBAAU,iBADO;AAEjB,mBAAa,GAFI;AAGjB,oBAAc,GAHG;AAIjB,qBAAe;AAJE,KAAlB;AAOA,WAAQ;AAAK,MAAA,KAAK,EAAC,KAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACP;AAAQ,MAAA,KAAK,EAAC,KAAd;AAAoB,MAAA,MAAM,EAAC,KAA3B;AAAiC,MAAA,GAAG,EAAC,QAArC;AAA8C,MAAA,KAAK,EAAEA,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oDADO,CAAR;AAKA;;AA/D0C","sourcesContent":["import React from 'react'\n\nexport class Canvas extends React.Component {\n\n\tcomponentDidMount() {\n\n\t\t// const {canvasHeight, canvasWidth} = this.state.canvasDims\n\t\t// this.refs.canvas.height = canvasHeight\n\t\t// this.refs.canvas.width = canvasWidth\n\t\tthis.setupCanvas()\n\t}\n\n\tcomponentDidUpdate() {\n\t\t// const {canvasHeight, canvasWidth} = this.state.canvasDims\n\t\t// this.refs.canvas.height = canvasHeight\n\t\t// this.refs.canvas.width = canvasWidth\n\n\t\tthis.setupCanvas()\n\t}\n\n\tsetupCanvas() {\n\t\tconst ctx = this.refs.canvas.getContext('2d')\n\n\t\tlet penDown = false\n\n\t\tlet startDrawing = () => {\n\t\t\tpenDown = true\n\t\t}\n\n\t\tlet endDrawing = () => {\n\t\t\tpenDown = false\n\t\t\tctx.beginPath()\n\t\t}\n\n\t\tlet draw = e => {\n\t\t\tif (!penDown) \n\t\t\t\treturn\n\n\t\t\t\t// ctx.lineWidth = 5\n\t\t\t// ctx.lineCap = 'round'\n\t\t\tctx.lineTo(e.clientX, e.clientY);\n\t\t\tctx.stroke()\n\n\t\t}\n\n\t\tthis.refs.canvas.addEventListener('mousedown', startDrawing)\n\t\tthis.refs.canvas.addEventListener('mouseup', endDrawing)\n\t\tthis.refs.canvas.addEventListener('mousemove', draw)\n\n\t}\n\n\trender() {\n\n\t\tvar canvasStyle = {\n\t\t\t\"border\": \"2px solid black\",\n\t\t\t\"marginTop\": \"0\",\n\t\t\t\"marginLeft\": \"0\",\n\t\t\t\"marginRight\": \"90%\"\n\t\t}\n\n\t\treturn (<div width=\"400\">\n\t\t\t<canvas width=\"500\" height=\"200\" ref=\"canvas\" style={canvasStyle}>\n\t\t\t\tSorry your browser does not support canvas\n\t\t\t</canvas>\n\t\t</div>)\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}