{"ast":null,"code":"var _jsxFileName = \"/home/abisek/Python/DL/heroku-apps/mnist_webapp/mnist-webapp/src/components/DrawCanvas.js\";\nimport React from 'react';\nimport { predict } from './Main';\n\nvar tf = require('@tensorflow/tfjs');\n\nlet model = null;\nlet uri = window.location.href + 'modelJS/model.json';\nexport class Canvas extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    this.clearCanvas = () => {\n      const ctx = this.refs.canvas.getContext('2d');\n      ctx.clearRect(0, 0, this.refs.canvas.width, this.refs.canvas.height);\n    };\n  }\n\n  async loadModel() {\n    try {\n      model = await tf.loadLayersModel(uri);\n      console.log(model);\n    } catch (e) {\n      console.log(e);\n    }\n  }\n\n  componentDidMount() {\n    // const {canvasHeight, canvasWidth} = this.state.canvasDims\n    // this.refs.canvas.height = canvasHeight\n    // this.refs.canvas.width = canvasWidth\n    this.setupCanvas();\n    this.loadModel();\n  }\n\n  componentDidUpdate() {\n    // const {canvasHeight, canvasWidth} = this.state.canvasDims\n    // this.refs.canvas.height = canvasHeight\n    // this.refs.canvas.width = canvasWidth\n    this.setupCanvas();\n  }\n\n  setupCanvas() {\n    const canvas = this.refs.canvas;\n    const ctx = canvas.getContext('2d');\n    let penDown = false;\n\n    let startDrawing = () => {\n      penDown = true;\n    };\n\n    let endDrawing = () => {\n      penDown = false;\n      ctx.beginPath();\n      let imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n      let predictions = predict(model, imageData);\n      console.log(predictions.dataSync());\n    };\n\n    let draw = e => {\n      if (!penDown) return;\n      ctx.lineWidth = 15;\n      ctx.lineCap = 'round';\n      ctx.shadowBlur = 2;\n      ctx.shadowOffsetX = 5;\n      ctx.shadowOffsetY = 3;\n      ctx.shadowColor = \"rgba(0, 0, 0, 0.5)\";\n      ctx.lineTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n      ctx.stroke();\n    };\n\n    canvas.addEventListener('mousedown', startDrawing);\n    canvas.addEventListener('mouseup', endDrawing);\n    canvas.addEventListener('mousemove', draw);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 86\n      },\n      __self: this\n    }, React.createElement(\"canvas\", {\n      id: \"drawCanvas\",\n      width: \"500\",\n      height: \"500\",\n      ref: \"canvas\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 87\n      },\n      __self: this\n    }, \"Sorry your browser does not support canvas\"), React.createElement(\"button\", {\n      id: \"clearButton\",\n      onClick: this.clearCanvas,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 90\n      },\n      __self: this\n    }, \"Clear\"));\n  }\n\n}","map":{"version":3,"sources":["/home/abisek/Python/DL/heroku-apps/mnist_webapp/mnist-webapp/src/components/DrawCanvas.js"],"names":["React","predict","tf","require","model","uri","window","location","href","Canvas","Component","clearCanvas","ctx","refs","canvas","getContext","clearRect","width","height","loadModel","loadLayersModel","console","log","e","componentDidMount","setupCanvas","componentDidUpdate","penDown","startDrawing","endDrawing","beginPath","imageData","getImageData","predictions","dataSync","draw","lineWidth","lineCap","shadowBlur","shadowOffsetX","shadowOffsetY","shadowColor","lineTo","clientX","offsetLeft","clientY","offsetTop","stroke","addEventListener","render"],"mappings":"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","sourcesContent":["import React from 'react'\nimport {predict} from './Main'\nvar tf = require('@tensorflow/tfjs')\n\nlet model = null\nlet uri = window.location.href + 'modelJS/model.json'\n\nexport class Canvas extends React.Component {\n\n\tasync loadModel(){\n\t\ttry{\n\t\t\tmodel =  await tf.loadLayersModel(uri)\n\t\t\tconsole.log(model);\n\t\t}catch(e){\n\t\t\tconsole.log(e)\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\n\t\t// const {canvasHeight, canvasWidth} = this.state.canvasDims\n\t\t// this.refs.canvas.height = canvasHeight\n\t\t// this.refs.canvas.width = canvasWidth\n\n\n\t\tthis.setupCanvas()\n\t\tthis.loadModel()\n\n\n\t}\n\n\tcomponentDidUpdate() {\n\t\t// const {canvasHeight, canvasWidth} = this.state.canvasDims\n\t\t// this.refs.canvas.height = canvasHeight\n\t\t// this.refs.canvas.width = canvasWidth\n\n\t\tthis.setupCanvas()\n\t}\n\n\tsetupCanvas() {\n\t\tconst canvas = this.refs.canvas\n\t\tconst ctx = canvas.getContext('2d')\n\n\t\tlet penDown = false\n\n\t\tlet startDrawing = () => {\n\t\t\tpenDown = true\n\t\t}\n\n\t\tlet endDrawing = () => {\n\t\t\tpenDown = false\n\t\t\tctx.beginPath()\n\n\t\t\tlet imageData = ctx.getImageData(0,0,canvas.width,canvas.height)\n\t\t\tlet predictions = predict(model,imageData)\n\t\t\tconsole.log(predictions.dataSync());\n\t\t}\n\n\t\tlet draw = e => {\n\t\t\tif (!penDown)\n\t\t\t\treturn\n\n\t\t\tctx.lineWidth = 15\n\t\t\tctx.lineCap = 'round'\n\t\t\tctx.shadowBlur = 2;\n\t\t\tctx.shadowOffsetX = 5;\n\t\t\tctx.shadowOffsetY = 3;\n\t\t\tctx.shadowColor = \"rgba(0, 0, 0, 0.5)\";\n\t\t\tctx.lineTo(e.clientX - canvas.offsetLeft, e.clientY - canvas.offsetTop);\n\t\t\tctx.stroke()\n\n\t\t}\n\n\t\tcanvas.addEventListener('mousedown', startDrawing)\n\t\tcanvas.addEventListener('mouseup', endDrawing)\n\t\tcanvas.addEventListener('mousemove', draw)\n\n\t}\n\n\tclearCanvas = () => {\n\t\tconst ctx = this.refs.canvas.getContext('2d')\n\t\tctx.clearRect(0, 0, this.refs.canvas.width, this.refs.canvas.height)\n\t}\n\n\trender() {\n\t\treturn (<div>\n\t\t\t<canvas id=\"drawCanvas\" width=\"500\" height=\"500\" ref=\"canvas\">\n\t\t\t\tSorry your browser does not support canvas\n\t\t\t</canvas>\n\t\t\t<button id=\"clearButton\" onClick={this.clearCanvas}>Clear</button>\n\t\t</div>)\n\t}\n\n}\n"]},"metadata":{},"sourceType":"module"}