{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar K = require(\"./backend/tfjs_backend\");\n\nvar errors_1 = require(\"./errors\");\n\nfunction meanSquaredError(yTrue, yPred) {\n  return K.mean(K.square(K.subtract(yPred, yTrue)), -1);\n}\n\nexports.meanSquaredError = meanSquaredError;\n\nfunction meanAbsoluteError(yTrue, yPred) {\n  return K.mean(K.abs(K.subtract(yPred, yTrue)), -1);\n}\n\nexports.meanAbsoluteError = meanAbsoluteError;\n\nfunction meanAbsolutePercentageError(yTrue, yPred) {\n  var diff = K.subtract(yTrue, yPred);\n  var clippedTrue = K.clip(K.abs(yTrue), K.epsilon(), Number.MAX_VALUE);\n  var absResult = K.abs(K.divide(diff, clippedTrue));\n  return K.scalarTimesArray(K.getScalar(100.0), K.mean(absResult, -1));\n}\n\nexports.meanAbsolutePercentageError = meanAbsolutePercentageError;\n\nfunction meanSquaredLogarithmicError(yTrue, yPred) {\n  var one = K.getScalar(1.0);\n  var clippedPred = K.clip(yPred, K.epsilon(), Number.MAX_VALUE);\n  var firstLog = K.log(K.scalarPlusArray(one, clippedPred));\n  var clippedTrue = K.clip(yTrue, K.epsilon(), Number.MAX_VALUE);\n  var secondLog = K.log(K.scalarPlusArray(one, clippedTrue));\n  return K.mean(K.square(K.subtract(firstLog, secondLog)), -1);\n}\n\nexports.meanSquaredLogarithmicError = meanSquaredLogarithmicError;\n\nfunction squaredHinge(yTrue, yPred) {\n  var zeroTensor = K.getScalar(0.0);\n  var one = K.getScalar(1.0);\n  var maxResult = K.maximum(zeroTensor, K.subtract(one, K.multiply(yTrue, yPred)));\n  return K.mean(K.square(maxResult), -1);\n}\n\nexports.squaredHinge = squaredHinge;\n\nfunction hinge(yTrue, yPred) {\n  var zeroTensor = K.getScalar(0.0);\n  var one = K.getScalar(1.0);\n  var maxResult = K.maximum(zeroTensor, K.subtract(one, K.multiply(yTrue, yPred)));\n  return K.mean(maxResult, -1);\n}\n\nexports.hinge = hinge;\n\nfunction categoricalHinge(yTrue, yPred) {\n  var zeroTensor = K.getScalar(0.0);\n  var one = K.getScalar(1.0);\n  var pos = K.sum(K.multiply(yTrue, yPred), -1);\n  var neg = K.max(K.multiply(K.subtract(one, yTrue), yPred), -1);\n  return K.maximum(zeroTensor, K.scalarPlusArray(one, K.subtract(neg, pos)));\n}\n\nexports.categoricalHinge = categoricalHinge;\n\nfunction logcosh(yTrue, yPred) {\n  var log2 = K.getScalar(Math.log(2.0));\n  var predictionDiff = K.subtract(yPred, yTrue);\n  var logcoshResult = K.subtract(K.add(predictionDiff, K.softplus(K.scalarTimesArray(K.getScalar(-2.0), predictionDiff))), log2);\n  return K.mean(logcoshResult, -1);\n}\n\nexports.logcosh = logcosh;\n\nfunction categoricalCrossentropy(yTrue, yPred) {\n  return K.categoricalCrossentropy(yTrue, yPred);\n}\n\nexports.categoricalCrossentropy = categoricalCrossentropy;\n\nfunction sparseCategoricalCrossentropy(yTrue, yPred) {\n  return K.sparseCategoricalCrossentropy(yTrue, yPred);\n}\n\nexports.sparseCategoricalCrossentropy = sparseCategoricalCrossentropy;\n\nfunction binaryCrossentropy(yTrue, yPred) {\n  return K.mean(K.binaryCrossentropy(yTrue, yPred), -1);\n}\n\nexports.binaryCrossentropy = binaryCrossentropy;\n\nfunction kullbackLeiblerDivergence(yTrue, yPred) {\n  var clippedTrue = K.clip(yTrue, K.epsilon(), 1);\n  var clippedPred = K.clip(yPred, K.epsilon(), 1);\n  return K.sum(K.multiply(yTrue, K.log(K.divide(clippedTrue, clippedPred))), -1);\n}\n\nexports.kullbackLeiblerDivergence = kullbackLeiblerDivergence;\n\nfunction poisson(yTrue, yPred) {\n  var logPred = K.log(K.scalarPlusArray(K.getScalar(K.epsilon()), yPred));\n  return K.mean(K.subtract(yPred, K.multiply(yTrue, logPred)), -1);\n}\n\nexports.poisson = poisson;\n\nfunction cosineProximity(yTrue, yPred) {\n  var trueNormalized = K.l2Normalize(yTrue, -1);\n  var predNormalized = K.l2Normalize(yPred, -1);\n  var trueXPred = K.multiply(trueNormalized, predNormalized);\n  return K.neg(K.sum(trueXPred, -1));\n}\n\nexports.cosineProximity = cosineProximity;\nexports.mse = meanSquaredError;\nexports.MSE = meanSquaredError;\nexports.mae = meanAbsoluteError;\nexports.MAE = meanAbsoluteError;\nexports.mape = meanAbsolutePercentageError;\nexports.MAPE = meanAbsolutePercentageError;\nexports.msle = meanSquaredLogarithmicError;\nexports.MSLE = meanSquaredLogarithmicError;\nexports.kld = kullbackLeiblerDivergence;\nexports.KLD = kullbackLeiblerDivergence;\nexports.cosine = cosineProximity;\n\nfunction get(identifierOrFn) {\n  var lossesMap = {\n    meanSquaredError: meanSquaredError,\n    meanAbsoluteError: meanAbsoluteError,\n    meanAbsolutePercentageError: meanAbsolutePercentageError,\n    meanSquaredLogarithmicError: meanSquaredLogarithmicError,\n    squaredHinge: squaredHinge,\n    hinge: hinge,\n    categoricalHinge: categoricalHinge,\n    logcosh: logcosh,\n    categoricalCrossentropy: categoricalCrossentropy,\n    sparseCategoricalCrossentropy: sparseCategoricalCrossentropy,\n    binaryCrossentropy: binaryCrossentropy,\n    kullbackLeiblerDivergence: kullbackLeiblerDivergence,\n    poisson: poisson,\n    cosineProximity: cosineProximity\n  };\n\n  if (typeof identifierOrFn === 'string') {\n    if (identifierOrFn in lossesMap) {\n      return lossesMap[identifierOrFn];\n    }\n\n    throw new errors_1.ValueError(\"Unknown loss \" + identifierOrFn);\n  } else {\n    return identifierOrFn;\n  }\n}\n\nexports.get = get;","map":null,"metadata":{},"sourceType":"script"}