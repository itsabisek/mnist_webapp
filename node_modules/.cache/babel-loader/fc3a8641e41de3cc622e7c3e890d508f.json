{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tensor_1 = require(\"./tensor\");\n\nvar util = require(\"./util\");\n\nexports.WEBGL_ENVS = {\n  'BACKEND': 'test-webgl'\n};\nexports.CPU_ENVS = {\n  'BACKEND': 'test-cpu'\n};\nexports.ALL_ENVS = {};\nexports.TEST_EPSILON = 1e-3;\n\nfunction expectArraysClose(actual, expected, epsilon) {\n  if (epsilon === void 0) {\n    epsilon = exports.TEST_EPSILON;\n  }\n\n  if (!(actual instanceof tensor_1.Tensor) && !(expected instanceof tensor_1.Tensor)) {\n    var aType = actual.constructor.name;\n    var bType = expected.constructor.name;\n\n    if (aType !== bType) {\n      throw new Error(\"Arrays are of different type actual: \" + aType + \" \" + (\"vs expected: \" + bType));\n    }\n  } else if (actual instanceof tensor_1.Tensor && expected instanceof tensor_1.Tensor) {\n    if (actual.dtype !== expected.dtype) {\n      throw new Error(\"Arrays are of different type actual: \" + actual.dtype + \" \" + (\"vs expected: \" + expected.dtype + \".\"));\n    }\n\n    if (!util.arraysEqual(actual.shape, expected.shape)) {\n      throw new Error(\"Arrays are of different shape actual: \" + actual.shape + \" \" + (\"vs expected: \" + expected.shape + \".\"));\n    }\n  }\n\n  var actualValues;\n  var expectedValues;\n\n  if (actual instanceof tensor_1.Tensor) {\n    actualValues = actual.dataSync();\n  } else {\n    actualValues = actual;\n  }\n\n  if (expected instanceof tensor_1.Tensor) {\n    expectedValues = expected.dataSync();\n  } else {\n    expectedValues = expected;\n  }\n\n  if (actualValues.length !== expectedValues.length) {\n    throw new Error(\"Arrays have different lengths actual: \" + actualValues.length + \" vs \" + (\"expected: \" + expectedValues.length + \".\\n\") + (\"Actual:   \" + actualValues + \".\\n\") + (\"Expected: \" + expectedValues + \".\"));\n  }\n\n  for (var i = 0; i < expectedValues.length; ++i) {\n    var a = actualValues[i];\n    var e = expectedValues[i];\n\n    if (!areClose(a, Number(e), epsilon)) {\n      throw new Error(\"Arrays differ: actual[\" + i + \"] = \" + a + \", expected[\" + i + \"] = \" + e + \".\\n\" + (\"Actual:   \" + actualValues + \".\\n\") + (\"Expected: \" + expectedValues + \".\"));\n    }\n  }\n}\n\nexports.expectArraysClose = expectArraysClose;\n\nfunction expectPromiseToFail(fn, done) {\n  fn().then(function () {\n    return done.fail();\n  }, function () {\n    return done();\n  });\n}\n\nexports.expectPromiseToFail = expectPromiseToFail;\n\nfunction expectArraysEqual(actual, expected) {\n  return expectArraysClose(actual, expected, 0);\n}\n\nexports.expectArraysEqual = expectArraysEqual;\n\nfunction expectNumbersClose(a, e, epsilon) {\n  if (epsilon === void 0) {\n    epsilon = exports.TEST_EPSILON;\n  }\n\n  if (!areClose(a, e, epsilon)) {\n    throw new Error(\"Numbers differ: actual === \" + a + \", expected === \" + e);\n  }\n}\n\nexports.expectNumbersClose = expectNumbersClose;\n\nfunction areClose(a, e, epsilon) {\n  if (isNaN(a) && isNaN(e)) {\n    return true;\n  }\n\n  if (isNaN(a) || isNaN(e) || Math.abs(a - e) > epsilon) {\n    return false;\n  }\n\n  return true;\n}\n\nfunction expectValuesInRange(actual, low, high) {\n  var actualVals;\n\n  if (actual instanceof tensor_1.Tensor) {\n    actualVals = actual.dataSync();\n  } else {\n    actualVals = actual;\n  }\n\n  for (var i = 0; i < actualVals.length; i++) {\n    if (actualVals[i] < low || actualVals[i] > high) {\n      throw new Error(\"Value out of range:\" + actualVals[i] + \" low: \" + low + \", high: \" + high);\n    }\n  }\n}\n\nexports.expectValuesInRange = expectValuesInRange;","map":null,"metadata":{},"sourceType":"script"}