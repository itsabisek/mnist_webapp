{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar seedrandom = require(\"seedrandom\");\n\nvar MPRandGauss = function () {\n  function MPRandGauss(mean, stdDeviation, dtype, truncated, seed) {\n    this.mean = mean;\n    this.stdDev = stdDeviation;\n    this.dtype = dtype;\n    this.nextVal = NaN;\n    this.truncated = truncated;\n\n    if (this.truncated) {\n      this.upper = this.mean + this.stdDev * 2;\n      this.lower = this.mean - this.stdDev * 2;\n    }\n\n    var seedValue = seed ? seed : Math.random();\n    this.random = seedrandom.alea(seedValue.toString());\n  }\n\n  MPRandGauss.prototype.nextValue = function () {\n    if (!isNaN(this.nextVal)) {\n      var value = this.nextVal;\n      this.nextVal = NaN;\n      return value;\n    }\n\n    var resultX, resultY;\n    var isValid = false;\n\n    while (!isValid) {\n      var v1 = void 0,\n          v2 = void 0,\n          s = void 0;\n\n      do {\n        v1 = 2 * this.random() - 1;\n        v2 = 2 * this.random() - 1;\n        s = v1 * v1 + v2 * v2;\n      } while (s >= 1 || s === 0);\n\n      var mul = Math.sqrt(-2.0 * Math.log(s) / s);\n      resultX = this.mean + this.stdDev * v1 * mul;\n      resultY = this.mean + this.stdDev * v2 * mul;\n\n      if (!this.truncated || this.isValidTruncated(resultX)) {\n        isValid = true;\n      }\n    }\n\n    if (!this.truncated || this.isValidTruncated(resultY)) {\n      this.nextVal = this.convertValue(resultY);\n    }\n\n    return this.convertValue(resultX);\n  };\n\n  MPRandGauss.prototype.convertValue = function (value) {\n    if (this.dtype == null || this.dtype === 'float32') {\n      return value;\n    }\n\n    return Math.round(value);\n  };\n\n  MPRandGauss.prototype.isValidTruncated = function (value) {\n    return value <= this.upper && value >= this.lower;\n  };\n\n  return MPRandGauss;\n}();\n\nexports.MPRandGauss = MPRandGauss;","map":null,"metadata":{},"sourceType":"script"}