{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar doc_1 = require(\"../doc\");\n\nvar util = require(\"../util\");\n\nvar operation_1 = require(\"./operation\");\n\nvar ops = require(\"./ops\");\n\nvar Reduction;\n\n(function (Reduction) {\n  Reduction[Reduction[\"NONE\"] = 0] = \"NONE\";\n  Reduction[Reduction[\"MEAN\"] = 1] = \"MEAN\";\n  Reduction[Reduction[\"SUM\"] = 2] = \"SUM\";\n  Reduction[Reduction[\"SUM_BY_NONZERO_WEIGHTS\"] = 3] = \"SUM_BY_NONZERO_WEIGHTS\";\n})(Reduction = exports.Reduction || (exports.Reduction = {}));\n\nvar LossOps = function () {\n  function LossOps() {}\n\n  LossOps.computeWeightedLoss = function (losses, weights, reduction) {\n    if (reduction === void 0) {\n      reduction = Reduction.SUM_BY_NONZERO_WEIGHTS;\n    }\n\n    util.assertArgumentsAreTensors({\n      losses: losses\n    }, 'computeWeightedLoss');\n\n    if (weights != null) {\n      util.assertArgumentsAreTensors({\n        weights: weights\n      }, 'computeWeightedLoss');\n    }\n\n    var weightedLoss = weights == null ? losses : losses.mul(weights);\n\n    if (reduction === Reduction.NONE) {\n      return weightedLoss;\n    }\n\n    if (reduction === Reduction.SUM) {\n      return weightedLoss.sum();\n    }\n\n    if (reduction === Reduction.MEAN) {\n      return weights == null ? weightedLoss.mean() : weightedLoss.sum().div(weights.sum());\n    }\n\n    if (reduction === Reduction.SUM_BY_NONZERO_WEIGHTS) {\n      if (weights == null) {\n        return weightedLoss.sum().div(ops.scalar(losses.size));\n      } else {\n        var numNonZeros = weights.notEqual(ops.scalar(0)).sum().toFloat();\n        return weightedLoss.sum().div(numNonZeros);\n      }\n    }\n\n    throw Error(\"Unknown reduction: \" + reduction);\n  };\n\n  LossOps.absoluteDifference = function (labels, predictions, weights, reduction) {\n    if (reduction === void 0) {\n      reduction = Reduction.SUM_BY_NONZERO_WEIGHTS;\n    }\n\n    util.assertArgumentsAreTensors({\n      labels: labels,\n      predictions: predictions\n    }, 'absoluteDifference');\n\n    if (weights != null) {\n      util.assertArgumentsAreTensors({\n        weights: weights\n      }, 'absoluteDifference');\n    }\n\n    util.assertShapesMatch(labels.shape, predictions.shape, 'Error in absoluteDifference: ');\n    var losses = labels.sub(predictions).abs();\n    return LossOps.computeWeightedLoss(losses, weights, reduction);\n  };\n\n  __decorate([doc_1.doc({\n    heading: 'Training',\n    subheading: 'Losses',\n    namespace: 'losses'\n  }), operation_1.operation], LossOps, \"computeWeightedLoss\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Training',\n    subheading: 'Losses',\n    namespace: 'losses'\n  }), operation_1.operation], LossOps, \"absoluteDifference\", null);\n\n  return LossOps;\n}();\n\nexports.LossOps = LossOps;","map":null,"metadata":{},"sourceType":"script"}