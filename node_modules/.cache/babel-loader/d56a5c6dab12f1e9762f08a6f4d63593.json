{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [0, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar environment_1 = require(\"./environment\");\n\nvar globals_1 = require(\"./globals\");\n\nvar ops = require(\"./ops/ops\");\n\nvar profiler_1 = require(\"./profiler\");\n\nvar tape_1 = require(\"./tape\");\n\nvar tensor_1 = require(\"./tensor\");\n\nvar util = require(\"./util\");\n\nvar Engine = function () {\n  function Engine(backend, safeMode) {\n    this.backend = backend;\n    this.safeMode = safeMode;\n    this.registeredVariables = {};\n    this.refCounter = new WeakMap();\n    this.nextTapeNodeId = 0;\n    this.numBytes = 0;\n    this.numTensors = 0;\n    this.numDataBuffers = 0;\n    this.gradientScopeCount = 0;\n    this.customGradientDepth = 0;\n    this.activeScope = {\n      keep: [],\n      track: []\n    };\n    this.scopeStack = [this.activeScope];\n    this.profiler = new profiler_1.Profiler(backend);\n  }\n\n  Engine.prototype.runKernel = function (forwardFunc, inputs, backwardsFunc) {\n    var _this = this;\n\n    var result;\n    var saved = [];\n\n    var saveFunc = function saveFunc(x) {\n      saved.push(x);\n      return x;\n    };\n\n    var scopeName = this.activeScope.name;\n    this.customGradientDepth++;\n\n    if (!environment_1.ENV.get('DEBUG')) {\n      result = forwardFunc(this.backend, saveFunc);\n    } else {\n      result = this.profiler.profileKernel(scopeName, function () {\n        return forwardFunc(_this.backend, saveFunc);\n      });\n    }\n\n    this.customGradientDepth--;\n\n    if (this.shouldRecord()) {\n      var tapeNode = {\n        id: this.nextTapeNodeId++,\n        name: scopeName,\n        inputs: inputs,\n        output: result\n      };\n\n      if (backwardsFunc != null) {\n        tapeNode.gradient = function (dy) {\n          return backwardsFunc(dy, saved);\n        };\n      }\n\n      this.activeTape.push(tapeNode);\n    }\n\n    return result;\n  };\n\n  Engine.prototype.registerTensor = function (a) {\n    var refCount = this.refCounter.has(a.dataId) ? this.refCounter.get(a.dataId) : 0;\n    this.numTensors++;\n\n    if (refCount === 0) {\n      this.numDataBuffers++;\n      this.numBytes += util.sizeFromShape(a.shape) * util.bytesPerElement(a.dtype);\n      this.backend.register(a.dataId, a.shape, a.dtype);\n    }\n\n    this.refCounter.set(a.dataId, refCount + 1);\n\n    if (!(a instanceof tensor_1.Variable)) {\n      this.track(a);\n    }\n  };\n\n  Engine.prototype.registerVariable = function (v) {\n    if (this.registeredVariables[v.name] != null) {\n      throw new Error(\"Variable with name \" + v.name + \" was already registered\");\n    }\n\n    this.registeredVariables[v.name] = v;\n  };\n\n  Engine.prototype.disposeTensor = function (a) {\n    if (!this.refCounter.has(a.dataId)) {\n      return;\n    }\n\n    this.numTensors--;\n    var refCount = this.refCounter.get(a.dataId);\n\n    if (refCount <= 1) {\n      this.refCounter.delete(a.dataId);\n      this.backend.disposeData(a.dataId);\n      this.numDataBuffers--;\n      this.numBytes -= util.sizeFromShape(a.shape) * util.bytesPerElement(a.dtype);\n    } else {\n      this.refCounter.set(a.dataId, refCount - 1);\n    }\n  };\n\n  Engine.prototype.memory = function () {\n    var info = this.backend.memory();\n    info.numTensors = this.numTensors;\n    info.numDataBuffers = this.numDataBuffers;\n    info.numBytes = this.numBytes;\n    return info;\n  };\n\n  Engine.prototype.shouldRecord = function () {\n    return this.activeTape != null && this.customGradientDepth === 0;\n  };\n\n  Engine.prototype.addTapeNode = function (inputs, result, gradientsFunc) {\n    var inputsMap = {};\n    inputs.forEach(function (input, idx) {\n      inputsMap[idx] = input;\n    });\n\n    var gradient = function gradient(dy) {\n      var res = gradientsFunc(dy);\n      var resMap = {};\n      res.forEach(function (r, idx) {\n        resMap[idx] = function () {\n          return r;\n        };\n      });\n      return resMap;\n    };\n\n    var tapeNode = {\n      id: this.nextTapeNodeId++,\n      name: this.activeScope.name,\n      inputs: inputsMap,\n      output: result,\n      gradient: gradient\n    };\n    this.activeTape.push(tapeNode);\n  };\n\n  Engine.prototype.keep = function (result) {\n    if (this.scopeStack.length === 1 && environment_1.ENV.engine.safeMode) {\n      throw new Error('Safe mode is ON. Enclose all tensor operations inside tf.tidy(): ' + 'tf.tidy(() => {...}) to avoid memory leaks.');\n    }\n\n    this.activeScope.keep.push(result);\n    return result;\n  };\n\n  Engine.prototype.startScope = function (name, gradientsMode) {\n    if (gradientsMode === void 0) {\n      gradientsMode = false;\n    }\n\n    if (gradientsMode && this.gradientScopeCount === 0) {\n      this.activeTape = [];\n    }\n\n    if (gradientsMode) {\n      this.gradientScopeCount++;\n    }\n\n    var scopeInfo = {\n      keep: [],\n      track: []\n    };\n\n    if (name) {\n      scopeInfo.name = name;\n    }\n\n    this.scopeStack.push(scopeInfo);\n    this.activeScope = scopeInfo;\n  };\n\n  Engine.prototype.endScope = function (result, gradientsMode) {\n    var _this = this;\n\n    if (gradientsMode === void 0) {\n      gradientsMode = false;\n    }\n\n    if (gradientsMode) {\n      this.gradientScopeCount--;\n\n      if (this.gradientScopeCount === 0) {\n        this.activeTape = null;\n      }\n    }\n\n    var tensorsToKeep = this.activeScope.keep;\n    var tensorsToTrackInParent = util.extractTensorsFromContainer(result);\n    tensorsToKeep = tensorsToKeep.concat(tensorsToTrackInParent);\n\n    for (var i = 0; i < this.activeScope.track.length; i++) {\n      var tensor = this.activeScope.track[i];\n\n      if (util.isTensorInList(tensor, tensorsToKeep)) {\n        continue;\n      }\n\n      if (this.activeTape != null) {\n        tensorsToTrackInParent.push(tensor);\n      } else {\n        tensor.dispose();\n      }\n    }\n\n    this.scopeStack.pop();\n    this.activeScope = this.scopeStack.length === 0 ? {\n      keep: [],\n      track: []\n    } : this.scopeStack[this.scopeStack.length - 1];\n    tensorsToTrackInParent.forEach(function (tensor) {\n      if (!util.isTensorInList(tensor, _this.activeScope.keep)) {\n        _this.track(tensor);\n      }\n    });\n  };\n\n  Engine.prototype.dispose = function () {};\n\n  Engine.prototype.gradients = function (f, xs, dy, allowNoGradients) {\n    var _this = this;\n\n    if (allowNoGradients === void 0) {\n      allowNoGradients = false;\n    }\n\n    util.assert(xs.length > 0, 'gradients() received an empty list of xs.');\n    return globals_1.tidy('gradients', function () {\n      var y = f();\n      util.assert(y instanceof tensor_1.Tensor, 'The result y returned by f() must be a tensor.');\n      var filteredTape = tape_1.getFilteredNodesXToY(_this.activeTape, xs, y);\n\n      if (!allowNoGradients && filteredTape.length === 0 && xs.length > 0) {\n        throw new Error('Cannot compute gradient of y=f(x) with respect to x. Make sure ' + 'that the f you passed encloses all operations that lead from x ' + 'to y.');\n      }\n\n      var accumulatedGradientMap = {};\n      accumulatedGradientMap[y.id] = dy == null ? ops.ones(y.shape) : dy;\n      tape_1.backpropagateGradients(accumulatedGradientMap, filteredTape);\n      var grads = xs.map(function (x) {\n        return accumulatedGradientMap[x.id];\n      });\n      return {\n        value: y,\n        grads: grads\n      };\n    }, true);\n  };\n\n  Engine.prototype.customGrad = function (f) {\n    var _this = this;\n\n    util.assert(util.isFunction(f), 'The f passed in customGrad(f) must be a function.');\n    return function () {\n      var inputs = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        inputs[_i] = arguments[_i];\n      }\n\n      util.assert(inputs.every(function (t) {\n        return t instanceof tensor_1.Tensor;\n      }), 'The args passed in customGrad(f)(x1, x2,...) must all be tensors');\n      _this.customGradientDepth++;\n      var gradientsFunc;\n      var gradientsMode = true;\n      var result = globals_1.tidy(f.name, function () {\n        var _a = f.apply(void 0, inputs),\n            value = _a.value,\n            gradFunc = _a.gradFunc;\n\n        util.assert(value instanceof tensor_1.Tensor, 'The function f passed in customGrad(f) must return an object ' + 'where `obj.value` is a tensor');\n        util.assert(util.isFunction(gradFunc), 'The function f passed in customGrad(f) must return an object ' + 'where `obj.gradFunc` is a function.');\n        gradientsFunc = gradFunc;\n        return value;\n      }, gradientsMode);\n      _this.customGradientDepth--;\n\n      if (_this.shouldRecord()) {\n        var gradFunc = function gradFunc(dy) {\n          var res = gradientsFunc(dy);\n          var grads = Array.isArray(res) ? res : [res];\n          util.assert(grads.length === inputs.length, 'The function f passed in customGrad(f) must return an object ' + 'where `obj.gradFunc` is a function that returns the same ' + 'number of tensors as inputs passed to f(...).');\n          util.assert(grads.every(function (t) {\n            return t instanceof tensor_1.Tensor;\n          }), 'The function f passed in customGrad(f) must return an object ' + 'where `obj.gradFunc` is a function that returns a list of ' + 'only tensors.');\n          return grads;\n        };\n\n        _this.addTapeNode(inputs, result, gradFunc);\n      }\n\n      return result;\n    };\n  };\n\n  Engine.prototype.write = function (dataId, values) {\n    this.backend.write(dataId, values);\n  };\n\n  Engine.prototype.readSync = function (dataId) {\n    return this.backend.readSync(dataId);\n  };\n\n  Engine.prototype.read = function (dataId) {\n    return this.backend.read(dataId);\n  };\n\n  Engine.prototype.fromPixels = function (pixels, numChannels) {\n    return this.backend.fromPixels(pixels, numChannels);\n  };\n\n  Engine.prototype.time = function (query) {\n    return __awaiter(this, void 0, void 0, function () {\n      var start, timingInfo;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            start = performance.now();\n            return [4, this.backend.time(query)];\n\n          case 1:\n            timingInfo = _a.sent();\n            timingInfo.wallMs = performance.now() - start;\n            return [2, timingInfo];\n        }\n      });\n    });\n  };\n\n  Engine.prototype.track = function (result) {\n    if (this.scopeStack.length === 1 && this.safeMode) {\n      throw new Error('Safe mode is ON. Enclose all tensor operations inside tf.tidy(): ' + 'tf.tidy(() => {op();...}); to avoid memory leaks.');\n    }\n\n    this.activeScope.track.push(result);\n    return result;\n  };\n\n  return Engine;\n}();\n\nexports.Engine = Engine;","map":null,"metadata":{},"sourceType":"script"}