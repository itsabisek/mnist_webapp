{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [0, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tfjs_core_1 = require(\"@tensorflow/tfjs-core\");\n\nvar K = require(\"./backend/tfjs_backend\");\n\nvar topology_1 = require(\"./engine/topology\");\n\nvar training_1 = require(\"./engine/training\");\n\nvar errors_1 = require(\"./errors\");\n\nvar serialization_1 = require(\"./layers/serialization\");\n\nvar generic_utils = require(\"./utils/generic_utils\");\n\nvar serialization_utils_1 = require(\"./utils/serialization_utils\");\n\nfunction modelFromJSON(modelAndWeightsConfig, customObjects) {\n  return __awaiter(this, void 0, void 0, function () {\n    var modelTopology, tsConfig, model, weightValues, uniqueWeightValues, _i, _a, weight, skipMismatches, isNamedTensorMap;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          modelTopology = modelAndWeightsConfig.modelTopology;\n\n          if (modelTopology['model_config'] != null) {\n            modelTopology = modelTopology['model_config'];\n          }\n\n          tsConfig = serialization_utils_1.convertPythonicToTs(modelTopology);\n          model = serialization_1.deserialize(tsConfig, customObjects);\n          if (!(modelAndWeightsConfig.weightsManifest != null)) return [3, 2];\n          return [4, tfjs_core_1.loadWeights(modelAndWeightsConfig.weightsManifest, modelAndWeightsConfig.pathPrefix, model.weights.map(function (weight) {\n            return weight.originalName;\n          }))];\n\n        case 1:\n          weightValues = _b.sent();\n          uniqueWeightValues = {};\n\n          for (_i = 0, _a = model.weights; _i < _a.length; _i++) {\n            weight = _a[_i];\n            uniqueWeightValues[weight.name] = weightValues[weight.originalName];\n          }\n\n          skipMismatches = null;\n          isNamedTensorMap = true;\n          model.loadWeights(uniqueWeightValues, skipMismatches, isNamedTensorMap);\n          _b.label = 2;\n\n        case 2:\n          return [2, model];\n      }\n    });\n  });\n}\n\nexports.modelFromJSON = modelFromJSON;\n\nfunction loadModelInternal(modelConfigPath) {\n  return __awaiter(this, void 0, void 0, function () {\n    var modelConfigRequest, modelConfig;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4, fetch(modelConfigPath)];\n\n        case 1:\n          modelConfigRequest = _a.sent();\n          return [4, modelConfigRequest.json()];\n\n        case 2:\n          modelConfig = _a.sent();\n\n          if (modelConfig['modelTopology'] == null) {\n            throw new errors_1.ValueError('Missing field \"modelTopology\" from model JSON at path' + modelConfigPath);\n          }\n\n          if (modelConfig['weightsManifest'] == null) {\n            throw new errors_1.ValueError('Missing field \"weightsManifest\" from model JSON at path' + modelConfigPath);\n          }\n\n          modelConfig.pathPrefix = modelConfigPath.substring(0, modelConfigPath.lastIndexOf('/'));\n          return [2, modelFromJSON(modelConfig)];\n      }\n    });\n  });\n}\n\nexports.loadModelInternal = loadModelInternal;\n\nvar Sequential = function (_super) {\n  __extends(Sequential, _super);\n\n  function Sequential(config) {\n    var _this = _super.call(this, {\n      inputs: [],\n      outputs: []\n    }) || this;\n\n    config = config || {};\n    _this.trainable = true;\n    _this._updatable = true;\n    _this.built = false;\n    _this.name = config.name != null ? config.name : K.getUid('sequential_');\n\n    if (config.layers != null) {\n      for (var _i = 0, _a = config.layers; _i < _a.length; _i++) {\n        var layer = _a[_i];\n\n        _this.add(layer);\n      }\n    }\n\n    return _this;\n  }\n\n  Sequential_1 = Sequential;\n\n  Sequential.prototype.getClassName = function () {\n    return 'Sequential';\n  };\n\n  Sequential.prototype.add = function (layer) {\n    if (this.outputs.length === 0) {\n      if (layer.inboundNodes.length === 0) {\n        if (layer.batchInputShape == null) {\n          throw new errors_1.ValueError('The first layer in a Sequential model must ' + 'get an `inputShape` or `batchInputShape` argument.');\n        }\n\n        var x = topology_1.Input({\n          batchShape: layer.batchInputShape,\n          dtype: layer.dtype,\n          name: layer.name + '_input'\n        });\n        layer.apply(x);\n      }\n\n      if (layer.inboundNodes.length !== 1) {\n        throw new errors_1.ValueError('A layer added to a Sequential model must not already be ' + (\"connected somewhere else. Model received layer \" + layer.name + \" \") + (\"which has \" + layer.inboundNodes.length + \" pre-existing inbound \") + 'connections.');\n      }\n\n      if (layer.inboundNodes[0].outputTensors.length !== 1) {\n        throw new errors_1.ValueError('All layers in a Sequential model ' + 'should have a single output tensor. ' + 'For multi-output layers, ' + 'use the functional API.');\n      }\n\n      this.outputs = [layer.inboundNodes[0].outputTensors[0]];\n      this.inputs = topology_1.getSourceInputs(this.outputs[0]);\n      new topology_1.Node({\n        outboundLayer: this,\n        inboundLayers: [],\n        nodeIndices: [],\n        tensorIndices: [],\n        inputTensors: this.inputs,\n        outputTensors: this.outputs,\n        inputMasks: generic_utils.pyListRepeat(null, this.inputs.length),\n        outputMasks: [null],\n        inputShapes: this.inputs.map(function (x) {\n          return x.shape;\n        }),\n        outputShapes: this.outputs[0].shape\n      });\n    } else {\n      var outputTensor = layer.apply(this.outputs[0]);\n\n      if (Array.isArray(outputTensor)) {\n        throw new TypeError('All layers in a Sequential model ' + 'should have a single output tensor. ' + 'For multi-output layers, ' + 'use the functional API.');\n      }\n\n      this.outputs = [outputTensor];\n      this.inboundNodes[0].outputTensors = this.outputs;\n      this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n    }\n\n    this.layers.push(layer);\n    this.built = false;\n  };\n\n  Sequential.prototype.pop = function () {\n    if (this.layers.length === 0) {\n      throw new TypeError('There are no layers in the model.');\n    }\n\n    this.layers.pop();\n\n    if (this.layers.length === 0) {\n      this.outputs = [];\n      this.inboundNodes = [];\n      this.outboundNodes = [];\n    } else {\n      var lastLayerIndex = this.layers.length - 1;\n      this.layers[lastLayerIndex].outboundNodes = [];\n      this.outputs = [this.layers[lastLayerIndex].output];\n      this.inboundNodes[0].outputTensors = this.outputs;\n      this.inboundNodes[0].outputShapes = [this.outputs[0].shape];\n    }\n  };\n\n  Sequential.prototype.call = function (inputs, kwargs) {\n    if (this.model == null) {\n      this.build();\n    }\n\n    return this.model.call(inputs, kwargs);\n  };\n\n  Sequential.prototype.build = function (inputShape) {\n    if (this.inputs.length === 0 || this.outputs.length === 0) {\n      throw new TypeError('Sequential model cannot be built: model is empty.' + ' Add some layers first.');\n    }\n\n    this.model = new training_1.Model({\n      inputs: this.inputs,\n      outputs: this.outputs[0],\n      name: this.name + '_model'\n    });\n    this.model.trainable = this.trainable;\n    this.model.updatable = this.updatable;\n    this.supportsMasking = this.model.supportsMasking;\n    this.inputLayers = this.model.inputLayers;\n    this.inputLayersNodeIndices = this.model.inputLayersNodeIndices;\n    this.inputLayersTensorIndices = this.model.inputLayersTensorIndices;\n    this.outputLayers = this.model.outputLayers;\n    this.outputLayersNodeIndices = this.model.outputLayersNodeIndices;\n    this.outputLayersTensorIndices = this.model.outputLayersTensorIndices;\n    this.nodesByDepth = this.model.nodesByDepth;\n    this.containerNodes = this.model.containerNodes;\n    this.outputNames = this.model.outputNames;\n    this.inputNames = this.model.inputNames;\n    this.built = true;\n  };\n\n  Sequential.prototype.setWeights = function (weights) {\n    if (this.model == null) {\n      this.build();\n    }\n\n    this.model.setWeights(weights);\n  };\n\n  Object.defineProperty(Sequential.prototype, \"updatable\", {\n    get: function get() {\n      return this._updatable;\n    },\n    set: function set(value) {\n      if (this.built) {\n        this.model.updatable = value;\n      }\n\n      this._updatable = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  Sequential.prototype.evaluate = function (x, y, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    if (!this.built) {\n      throw new errors_1.RuntimeError('The model needs to be compiled before being used.');\n    }\n\n    return this.model.evaluate(x, y, config);\n  };\n\n  Sequential.prototype.predict = function (x, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    if (this.model == null) {\n      this.build();\n    }\n\n    return this.model.predict(x, config);\n  };\n\n  Sequential.prototype.predictOnBatch = function (x) {\n    if (this.model == null) {\n      this.build();\n    }\n\n    return this.model.predictOnBatch(x);\n  };\n\n  Sequential.prototype.compile = function (config) {\n    this.build();\n    this.model.compile(config);\n    this.optimizer = this.model.optimizer;\n    this.loss = this.model.loss;\n    this.metrics = this.model.metrics;\n    this.metricsTensors = this.model.metricsTensors;\n    this.metricsNames = this.model.metricsNames;\n  };\n\n  Sequential.prototype.fit = function (x, y, config) {\n    if (config === void 0) {\n      config = {};\n    }\n\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        if (!this.built) {\n          throw new errors_1.RuntimeError('The model needs to be compiled before ' + 'being used.');\n        }\n\n        return [2, this.model.fit(x, y, config)];\n      });\n    });\n  };\n\n  Sequential.fromConfig = function (cls, config) {\n    var model = new cls({});\n\n    if (!(model instanceof Sequential_1)) {\n      throw new errors_1.ValueError(\"Sequential.fromConfig called on non-Sequential input: \" + model);\n    }\n\n    if (!(config instanceof Array)) {\n      throw new errors_1.ValueError(\"Sequential.fromConfig called without an array of configs\");\n    }\n\n    if (!(config[0].className != null) || config[0]['className'] === 'Merge') {\n      throw new errors_1.ValueError('Legacy serialization format not supported yet.');\n    }\n\n    for (var _i = 0, _a = config; _i < _a.length; _i++) {\n      var conf = _a[_i];\n      var layer = serialization_1.deserialize(conf);\n      model.add(layer);\n    }\n\n    return model;\n  };\n\n  Sequential.prototype.getConfig = function () {\n    var config = [];\n\n    for (var _i = 0, _a = this.layers; _i < _a.length; _i++) {\n      var layer = _a[_i];\n      config.push({\n        className: layer.getClassName(),\n        config: layer.getConfig()\n      });\n    }\n\n    return config;\n  };\n\n  __decorate([tfjs_core_1.doc({\n    heading: 'Models',\n    subheading: 'Classes'\n  })], Sequential.prototype, \"add\", null);\n\n  __decorate([tfjs_core_1.doc({\n    heading: 'Models',\n    subheading: 'Classes',\n    configParamIndices: [2]\n  })], Sequential.prototype, \"evaluate\", null);\n\n  __decorate([tfjs_core_1.doc({\n    heading: 'Models',\n    subheading: 'Classes',\n    configParamIndices: [1]\n  })], Sequential.prototype, \"predict\", null);\n\n  __decorate([tfjs_core_1.doc({\n    heading: 'Models',\n    subheading: 'Classes',\n    configParamIndices: [2]\n  })], Sequential.prototype, \"fit\", null);\n\n  Sequential = Sequential_1 = __decorate([tfjs_core_1.doc({\n    heading: 'Models',\n    subheading: 'Classes'\n  })], Sequential);\n  return Sequential;\n  var Sequential_1;\n}(training_1.Model);\n\nexports.Sequential = Sequential;\ngeneric_utils.ClassNameMap.register('Sequential', Sequential);","map":null,"metadata":{},"sourceType":"script"}