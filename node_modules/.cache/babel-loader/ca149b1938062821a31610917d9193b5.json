{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar K = require(\"../backend/tfjs_backend\");\n\nvar common_1 = require(\"../common\");\n\nvar topology_1 = require(\"../engine/topology\");\n\nvar topology_2 = require(\"../engine/topology\");\n\nvar errors_1 = require(\"../errors\");\n\nvar conv_utils_1 = require(\"../utils/conv_utils\");\n\nvar generic_utils = require(\"../utils/generic_utils\");\n\nvar Pooling1D = function (_super) {\n  __extends(Pooling1D, _super);\n\n  function Pooling1D(config) {\n    var _this = this;\n\n    if (config.poolSize == null) {\n      config.poolSize = 2;\n    }\n\n    _this = _super.call(this, config) || this;\n    _this.poolSize = [config.poolSize];\n    _this.strides = config.strides == null ? _this.poolSize : [config.strides];\n    _this.padding = config.padding == null ? 'valid' : config.padding;\n    common_1.checkPaddingMode(_this.padding);\n    _this.inputSpec = [new topology_1.InputSpec({\n      ndim: 3\n    })];\n    return _this;\n  }\n\n  Pooling1D.prototype.computeOutputShape = function (inputShape) {\n    inputShape = generic_utils.getExactlyOneShape(inputShape);\n    length = conv_utils_1.convOutputLength(inputShape[1], this.poolSize[0], this.padding, this.strides[0]);\n    return [inputShape[0], length, inputShape[2]];\n  };\n\n  Pooling1D.prototype.call = function (inputs, kwargs) {\n    this.invokeCallHook(inputs, kwargs);\n    inputs = K.expandDims(generic_utils.getExactlyOneTensor(inputs), 2);\n    var output = this.poolingFunction(generic_utils.getExactlyOneTensor(inputs), [this.poolSize[0], 1], [this.strides[0], 1], this.padding, 'channelsLast');\n    return K.squeeze(output, 2);\n  };\n\n  Pooling1D.prototype.getConfig = function () {\n    var config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides\n    };\n\n    var baseConfig = _super.prototype.getConfig.call(this);\n\n    Object.assign(config, baseConfig);\n    return config;\n  };\n\n  return Pooling1D;\n}(topology_2.Layer);\n\nexports.Pooling1D = Pooling1D;\n\nvar MaxPooling1D = function (_super) {\n  __extends(MaxPooling1D, _super);\n\n  function MaxPooling1D(config) {\n    return _super.call(this, config) || this;\n  }\n\n  MaxPooling1D.prototype.getClassName = function () {\n    return 'MaxPooling1D';\n  };\n\n  MaxPooling1D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n    common_1.checkDataFormat(dataFormat);\n    common_1.checkPaddingMode(padding);\n    return K.pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n  };\n\n  return MaxPooling1D;\n}(Pooling1D);\n\nexports.MaxPooling1D = MaxPooling1D;\ngeneric_utils.ClassNameMap.register('MaxPooling1D', MaxPooling1D);\n\nvar AveragePooling1D = function (_super) {\n  __extends(AveragePooling1D, _super);\n\n  function AveragePooling1D(config) {\n    return _super.call(this, config) || this;\n  }\n\n  AveragePooling1D.prototype.getClassName = function () {\n    return 'AveragePooling1D';\n  };\n\n  AveragePooling1D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n    common_1.checkDataFormat(dataFormat);\n    common_1.checkPaddingMode(padding);\n    return K.pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n  };\n\n  return AveragePooling1D;\n}(Pooling1D);\n\nexports.AveragePooling1D = AveragePooling1D;\ngeneric_utils.ClassNameMap.register('AveragePooling1D', AveragePooling1D);\n\nvar Pooling2D = function (_super) {\n  __extends(Pooling2D, _super);\n\n  function Pooling2D(config) {\n    var _this = this;\n\n    if (config.poolSize == null) {\n      config.poolSize = [2, 2];\n    }\n\n    _this = _super.call(this, config) || this;\n    _this.poolSize = Array.isArray(config.poolSize) ? config.poolSize : [config.poolSize, config.poolSize];\n    _this.strides = config.strides == null ? _this.poolSize : config.strides;\n    _this.padding = config.padding == null ? 'valid' : config.padding;\n    _this.dataFormat = config.dataFormat == null ? 'channelsLast' : config.dataFormat;\n    common_1.checkDataFormat(_this.dataFormat);\n    common_1.checkPaddingMode(_this.padding);\n    _this.inputSpec = [new topology_1.InputSpec({\n      ndim: 4\n    })];\n    return _this;\n  }\n\n  Pooling2D.prototype.computeOutputShape = function (inputShape) {\n    inputShape = generic_utils.getExactlyOneShape(inputShape);\n    var rows = this.dataFormat === 'channelsFirst' ? inputShape[2] : inputShape[1];\n    var cols = this.dataFormat === 'channelsFirst' ? inputShape[3] : inputShape[2];\n    rows = conv_utils_1.convOutputLength(rows, this.poolSize[0], this.padding, this.strides[0]);\n    cols = conv_utils_1.convOutputLength(cols, this.poolSize[1], this.padding, this.strides[1]);\n\n    if (this.dataFormat === 'channelsFirst') {\n      return [inputShape[0], inputShape[1], rows, cols];\n    } else {\n      return [inputShape[0], rows, cols, inputShape[3]];\n    }\n  };\n\n  Pooling2D.prototype.call = function (inputs, kwargs) {\n    this.invokeCallHook(inputs, kwargs);\n    return this.poolingFunction(generic_utils.getExactlyOneTensor(inputs), this.poolSize, this.strides, this.padding, this.dataFormat);\n  };\n\n  Pooling2D.prototype.getConfig = function () {\n    var config = {\n      poolSize: this.poolSize,\n      padding: this.padding,\n      strides: this.strides,\n      dataFormat: this.dataFormat\n    };\n\n    var baseConfig = _super.prototype.getConfig.call(this);\n\n    Object.assign(config, baseConfig);\n    return config;\n  };\n\n  return Pooling2D;\n}(topology_2.Layer);\n\nexports.Pooling2D = Pooling2D;\n\nvar MaxPooling2D = function (_super) {\n  __extends(MaxPooling2D, _super);\n\n  function MaxPooling2D(config) {\n    return _super.call(this, config) || this;\n  }\n\n  MaxPooling2D.prototype.getClassName = function () {\n    return 'MaxPooling2D';\n  };\n\n  MaxPooling2D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n    common_1.checkDataFormat(dataFormat);\n    common_1.checkPaddingMode(padding);\n    return K.pool2d(inputs, poolSize, strides, padding, dataFormat, 'max');\n  };\n\n  return MaxPooling2D;\n}(Pooling2D);\n\nexports.MaxPooling2D = MaxPooling2D;\ngeneric_utils.ClassNameMap.register('MaxPooling2D', MaxPooling2D);\n\nvar AveragePooling2D = function (_super) {\n  __extends(AveragePooling2D, _super);\n\n  function AveragePooling2D(config) {\n    return _super.call(this, config) || this;\n  }\n\n  AveragePooling2D.prototype.getClassName = function () {\n    return 'AveragePooling2D';\n  };\n\n  AveragePooling2D.prototype.poolingFunction = function (inputs, poolSize, strides, padding, dataFormat) {\n    common_1.checkDataFormat(dataFormat);\n    common_1.checkPaddingMode(padding);\n    return K.pool2d(inputs, poolSize, strides, padding, dataFormat, 'avg');\n  };\n\n  return AveragePooling2D;\n}(Pooling2D);\n\nexports.AveragePooling2D = AveragePooling2D;\ngeneric_utils.ClassNameMap.register('AveragePooling2D', AveragePooling2D);\n\nvar GlobalPooling1D = function (_super) {\n  __extends(GlobalPooling1D, _super);\n\n  function GlobalPooling1D(config) {\n    var _this = _super.call(this, config) || this;\n\n    _this.inputSpec = [new topology_1.InputSpec({\n      ndim: 3\n    })];\n    return _this;\n  }\n\n  GlobalPooling1D.prototype.computeOutputShape = function (inputShape) {\n    return [inputShape[0], inputShape[2]];\n  };\n\n  GlobalPooling1D.prototype.call = function (inputs, kwargs) {\n    throw new errors_1.NotImplementedError();\n  };\n\n  return GlobalPooling1D;\n}(topology_2.Layer);\n\nexports.GlobalPooling1D = GlobalPooling1D;\n\nvar GlobalAveragePooling1D = function (_super) {\n  __extends(GlobalAveragePooling1D, _super);\n\n  function GlobalAveragePooling1D(config) {\n    return _super.call(this, config) || this;\n  }\n\n  GlobalAveragePooling1D.prototype.getClassName = function () {\n    return 'GlobalAveragePooling1D';\n  };\n\n  GlobalAveragePooling1D.prototype.call = function (inputs, kwargs) {\n    var input = generic_utils.getExactlyOneTensor(inputs);\n    return K.mean(input, 1);\n  };\n\n  return GlobalAveragePooling1D;\n}(GlobalPooling1D);\n\nexports.GlobalAveragePooling1D = GlobalAveragePooling1D;\ngeneric_utils.ClassNameMap.register('GlobalAveragePooling1D', GlobalAveragePooling1D);\n\nvar GlobalMaxPooling1D = function (_super) {\n  __extends(GlobalMaxPooling1D, _super);\n\n  function GlobalMaxPooling1D(config) {\n    return _super.call(this, config) || this;\n  }\n\n  GlobalMaxPooling1D.prototype.getClassName = function () {\n    return 'GlobalMaxPooling1D';\n  };\n\n  GlobalMaxPooling1D.prototype.call = function (inputs, kwargs) {\n    var input = generic_utils.getExactlyOneTensor(inputs);\n    return K.max(input, 1);\n  };\n\n  return GlobalMaxPooling1D;\n}(GlobalPooling1D);\n\nexports.GlobalMaxPooling1D = GlobalMaxPooling1D;\ngeneric_utils.ClassNameMap.register('GlobalMaxPooling1D', GlobalMaxPooling1D);\n\nvar GlobalPooling2D = function (_super) {\n  __extends(GlobalPooling2D, _super);\n\n  function GlobalPooling2D(config) {\n    var _this = _super.call(this, config) || this;\n\n    _this.dataFormat = config.dataFormat == null ? 'channelsLast' : config.dataFormat;\n    common_1.checkDataFormat(_this.dataFormat);\n    _this.inputSpec = [new topology_1.InputSpec({\n      ndim: 4\n    })];\n    return _this;\n  }\n\n  GlobalPooling2D.prototype.computeOutputShape = function (inputShape) {\n    inputShape = inputShape;\n\n    if (this.dataFormat === 'channelsLast') {\n      return [inputShape[0], inputShape[3]];\n    } else {\n      return [inputShape[0], inputShape[1]];\n    }\n  };\n\n  GlobalPooling2D.prototype.call = function (inputs, kwargs) {\n    throw new errors_1.NotImplementedError();\n  };\n\n  GlobalPooling2D.prototype.getConfig = function () {\n    var config = {\n      dataFormat: this.dataFormat\n    };\n\n    var baseConfig = _super.prototype.getConfig.call(this);\n\n    Object.assign(config, baseConfig);\n    return config;\n  };\n\n  return GlobalPooling2D;\n}(topology_2.Layer);\n\nexports.GlobalPooling2D = GlobalPooling2D;\n\nvar GlobalAveragePooling2D = function (_super) {\n  __extends(GlobalAveragePooling2D, _super);\n\n  function GlobalAveragePooling2D() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GlobalAveragePooling2D.prototype.call = function (inputs, kwargs) {\n    var input = generic_utils.getExactlyOneTensor(inputs);\n\n    if (this.dataFormat === 'channelsLast') {\n      return K.mean(input, [1, 2]);\n    } else {\n      return K.mean(input, [2, 3]);\n    }\n  };\n\n  GlobalAveragePooling2D.prototype.getClassName = function () {\n    return 'GlobalAveragePooling2D';\n  };\n\n  return GlobalAveragePooling2D;\n}(GlobalPooling2D);\n\nexports.GlobalAveragePooling2D = GlobalAveragePooling2D;\ngeneric_utils.ClassNameMap.register('GlobalAveragePooling2D', GlobalAveragePooling2D);\n\nvar GlobalMaxPooling2D = function (_super) {\n  __extends(GlobalMaxPooling2D, _super);\n\n  function GlobalMaxPooling2D() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GlobalMaxPooling2D.prototype.call = function (inputs, kwargs) {\n    var input = generic_utils.getExactlyOneTensor(inputs);\n\n    if (this.dataFormat === 'channelsLast') {\n      return K.max(input, [1, 2]);\n    } else {\n      return K.max(input, [2, 3]);\n    }\n  };\n\n  GlobalMaxPooling2D.prototype.getClassName = function () {\n    return 'GlobalMaxPooling2D';\n  };\n\n  return GlobalMaxPooling2D;\n}(GlobalPooling2D);\n\nexports.GlobalMaxPooling2D = GlobalMaxPooling2D;\ngeneric_utils.ClassNameMap.register('GlobalMaxPooling2D', GlobalMaxPooling2D);","map":null,"metadata":{},"sourceType":"script"}