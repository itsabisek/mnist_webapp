{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar shader_compiler_1 = require(\"./shader_compiler\");\n\nvar WhereProgram = function () {\n  function WhereProgram(cRank, shape, rank) {\n    this.variableNames = ['c', 'a', 'b'];\n    this.outputShape = shape;\n    var cCoords;\n    var abCoords;\n\n    if (rank > 4) {\n      throw Error(\"Where for rank \" + rank + \" is not yet supported\");\n    }\n\n    if (rank === 1) {\n      abCoords = \"resRC\";\n      cCoords = \"resRC\";\n    } else {\n      var currentCoords = ['resRC.x', 'resRC.y', 'resRC.z', 'resRC.w'];\n      var cCoordVars = [];\n      var abCoordVars = [];\n\n      for (var i = 0; i < shape.length; i++) {\n        abCoordVars.push(\"\" + currentCoords[i]);\n\n        if (i < cRank) {\n          cCoordVars.push(\"\" + currentCoords[i]);\n        }\n      }\n\n      cCoords = cCoordVars.join();\n      abCoords = abCoordVars.join();\n    }\n\n    var dtype = shader_compiler_1.getCoordsDataType(rank);\n    this.userCode = \"\\n      void main() {\\n        \" + dtype + \" resRC = getOutputCoords();\\n        float cVal = getC(\" + cCoords + \");\\n        if (cVal >= 1.0) {\\n          setOutput(getA(\" + abCoords + \"));\\n        } else {\\n          setOutput(getB(\" + abCoords + \"));\\n        }\\n      }\\n    \";\n  }\n\n  return WhereProgram;\n}();\n\nexports.WhereProgram = WhereProgram;","map":null,"metadata":{},"sourceType":"script"}