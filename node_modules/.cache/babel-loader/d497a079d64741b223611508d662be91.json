{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function () {\n  var extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) {\n      if (b.hasOwnProperty(p)) d[p] = b[p];\n    }\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar environment_1 = require(\"../environment\");\n\nvar globals_1 = require(\"../globals\");\n\nvar ops_1 = require(\"../ops/ops\");\n\nvar optimizer_1 = require(\"./optimizer\");\n\nvar AdagradOptimizer = function (_super) {\n  __extends(AdagradOptimizer, _super);\n\n  function AdagradOptimizer(learningRate, initialAccumulatorValue) {\n    if (initialAccumulatorValue === void 0) {\n      initialAccumulatorValue = 0.1;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this.learningRate = learningRate;\n    _this.initialAccumulatorValue = initialAccumulatorValue;\n    _this.accumulatedGrads = {};\n    _this.c = globals_1.keep(ops_1.scalar(-learningRate));\n    _this.epsilon = globals_1.keep(ops_1.scalar(1e-8));\n    return _this;\n  }\n\n  AdagradOptimizer.prototype.applyGradients = function (variableGradients) {\n    var _this = this;\n\n    var _loop_1 = function _loop_1(variableName) {\n      var value = environment_1.ENV.engine.registeredVariables[variableName];\n\n      if (this_1.accumulatedGrads[variableName] == null) {\n        var trainable_1 = false;\n        globals_1.tidy(function () {\n          _this.accumulatedGrads[variableName] = ops_1.fill(value.shape, _this.initialAccumulatorValue).variable(trainable_1);\n        });\n      }\n\n      var gradient = variableGradients[variableName];\n      var accumulatedGrad = this_1.accumulatedGrads[variableName];\n      globals_1.tidy(function () {\n        var newAccumulatedGrad = accumulatedGrad.add(gradient.square());\n\n        _this.accumulatedGrads[variableName].assign(newAccumulatedGrad);\n\n        var newValue = _this.c.mul(gradient.div(newAccumulatedGrad.add(_this.epsilon).sqrt())).add(value);\n\n        value.assign(newValue);\n      });\n    };\n\n    var this_1 = this;\n\n    for (var variableName in variableGradients) {\n      _loop_1(variableName);\n    }\n  };\n\n  AdagradOptimizer.prototype.dispose = function () {\n    var _this = this;\n\n    this.epsilon.dispose();\n    this.c.dispose();\n\n    if (this.accumulatedGrads != null) {\n      Object.keys(this.accumulatedGrads).forEach(function (name) {\n        return _this.accumulatedGrads[name].dispose();\n      });\n    }\n  };\n\n  return AdagradOptimizer;\n}(optimizer_1.Optimizer);\n\nexports.AdagradOptimizer = AdagradOptimizer;","map":null,"metadata":{},"sourceType":"script"}