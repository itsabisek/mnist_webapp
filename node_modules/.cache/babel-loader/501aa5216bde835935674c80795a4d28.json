{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ResizeNearestNeighborProgram = function () {\n  function ResizeNearestNeighborProgram(inputShape, newHeight, newWidth, alignCorners) {\n    this.variableNames = ['A'];\n    this.outputShape = [];\n    var batch = inputShape[0],\n        oldHeight = inputShape[1],\n        oldWidth = inputShape[2],\n        depth = inputShape[3];\n    this.outputShape = [batch, newHeight, newWidth, depth];\n    var effectiveInSize = alignCorners ? [oldHeight - 1, oldWidth - 1] : [oldHeight, oldWidth];\n    var effectiveOutSize = alignCorners ? [newHeight - 1, newWidth - 1] : [newHeight, newWidth];\n    this.userCode = \"\\n      const vec2 effectiveInputOverOutputRatioRC = vec2(\\n          \" + effectiveInSize[0] / effectiveOutSize[0] + \",\\n          \" + effectiveInSize[1] / effectiveOutSize[1] + \");\\n      const vec2 inputShapeRC = vec2(\" + oldHeight + \".0, \" + oldWidth + \".0);\\n\\n      void main() {\\n        ivec4 coords = getOutputCoords();\\n        int b = coords[0];\\n        int d = coords[3];\\n        ivec2 yRC = coords.yz;\\n\\n        // Fractional source index.\\n        vec2 sourceFracIndexRC = vec2(yRC) * effectiveInputOverOutputRatioRC;\\n\\n        // Compute the coordinators of nearest neighbor point.\\n        ivec2 sourceNearestRC = ivec2(\\n          min(inputShapeRC - 1.0, floor(sourceFracIndexRC + 0.5)));\\n\\n        float newValue = getA(b, sourceNearestRC.x, sourceNearestRC.y, d);\\n\\n        setOutput(newValue);\\n      }\\n    \";\n  }\n\n  return ResizeNearestNeighborProgram;\n}();\n\nexports.ResizeNearestNeighborProgram = ResizeNearestNeighborProgram;","map":null,"metadata":{},"sourceType":"script"}