{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : new P(function (resolve) {\n        resolve(result.value);\n      }).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function sent() {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) {\n      try {\n        if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\n        if (y = 0, t) op = [0, t.value];\n\n        switch (op[0]) {\n          case 0:\n          case 1:\n            t = op;\n            break;\n\n          case 4:\n            _.label++;\n            return {\n              value: op[1],\n              done: false\n            };\n\n          case 5:\n            _.label++;\n            y = op[1];\n            op = [0];\n            continue;\n\n          case 7:\n            op = _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n\n          default:\n            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n              _ = 0;\n              continue;\n            }\n\n            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n              _.label = op[1];\n              break;\n            }\n\n            if (op[0] === 6 && _.label < t[1]) {\n              _.label = t[1];\n              t = op;\n              break;\n            }\n\n            if (t && _.label < t[2]) {\n              _.label = t[2];\n\n              _.ops.push(op);\n\n              break;\n            }\n\n            if (t[2]) _.ops.pop();\n\n            _.trys.pop();\n\n            continue;\n        }\n\n        op = body.call(thisArg, _);\n      } catch (e) {\n        op = [6, e];\n        y = 0;\n      } finally {\n        f = t = 0;\n      }\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar ops_1 = require(\"./ops/ops\");\n\nvar util = require(\"./util\");\n\nvar DTYPE_VALUE_SIZE_MAP = {\n  'float32': 4,\n  'int32': 4\n};\n\nfunction loadWeights(manifest, filePathPrefix, weightNames, requestOptions) {\n  if (filePathPrefix === void 0) {\n    filePathPrefix = '';\n  }\n\n  return __awaiter(this, void 0, void 0, function () {\n    var groupIndicesToFetchMap, groupWeightsToFetch, weightsFound, allManifestWeightNames, weightsNotFound, groupIndicesToFetch, requests, responses, buffers, weightsTensorMap, bufferIndexOffset;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          groupIndicesToFetchMap = manifest.map(function () {\n            return false;\n          });\n          groupWeightsToFetch = {};\n          weightsFound = weightNames != null ? weightNames.map(function () {\n            return false;\n          }) : [];\n          allManifestWeightNames = [];\n          manifest.forEach(function (manifestGroupConfig, groupIndex) {\n            var groupOffset = 0;\n            manifestGroupConfig.weights.forEach(function (weightsEntry) {\n              var weightsBytes = DTYPE_VALUE_SIZE_MAP[weightsEntry.dtype] * util.sizeFromShape(weightsEntry.shape);\n\n              var enqueueWeightsForFetchingFn = function enqueueWeightsForFetchingFn() {\n                groupIndicesToFetchMap[groupIndex] = true;\n\n                if (groupWeightsToFetch[groupIndex] == null) {\n                  groupWeightsToFetch[groupIndex] = [];\n                }\n\n                groupWeightsToFetch[groupIndex].push({\n                  manifestEntry: weightsEntry,\n                  groupOffset: groupOffset,\n                  sizeBytes: weightsBytes\n                });\n              };\n\n              if (weightNames != null) {\n                weightNames.forEach(function (weightName, weightIndex) {\n                  if (weightName === weightsEntry.name) {\n                    enqueueWeightsForFetchingFn();\n                    weightsFound[weightIndex] = true;\n                  }\n                });\n              } else {\n                enqueueWeightsForFetchingFn();\n              }\n\n              allManifestWeightNames.push(weightsEntry.name);\n              groupOffset += weightsBytes;\n            });\n          });\n\n          if (!weightsFound.every(function (found) {\n            return found;\n          })) {\n            weightsNotFound = weightNames.filter(function (weight, i) {\n              return !weightsFound[i];\n            });\n            throw new Error(\"Could not find weights in manifest with names: \" + (weightsNotFound.join(', ') + \". \\n\") + \"Manifest JSON has weights with names: \" + (allManifestWeightNames.join(', ') + \".\"));\n          }\n\n          groupIndicesToFetch = groupIndicesToFetchMap.reduce(function (accumulator, shouldFetch, i) {\n            if (shouldFetch) {\n              accumulator.push(i);\n            }\n\n            return accumulator;\n          }, []);\n          requests = [];\n          groupIndicesToFetch.forEach(function (i) {\n            manifest[i].paths.forEach(function (filepath) {\n              var fetchUrl = filePathPrefix + (!filePathPrefix.endsWith('/') ? '/' : '') + filepath;\n              requests.push(fetch(fetchUrl, requestOptions));\n            });\n          });\n          return [4, Promise.all(requests)];\n\n        case 1:\n          responses = _a.sent();\n          return [4, Promise.all(responses.map(function (response) {\n            return response.arrayBuffer();\n          }))];\n\n        case 2:\n          buffers = _a.sent();\n          weightsTensorMap = {};\n          bufferIndexOffset = 0;\n          groupIndicesToFetch.forEach(function (i) {\n            var numBuffers = manifest[i].paths.length;\n            var groupBytes = 0;\n\n            for (var i_1 = 0; i_1 < numBuffers; i_1++) {\n              groupBytes += buffers[bufferIndexOffset + i_1].byteLength;\n            }\n\n            var groupBuffer = new ArrayBuffer(groupBytes);\n            var groupByteBuffer = new Uint8Array(groupBuffer);\n            var groupBufferOffset = 0;\n\n            for (var i_2 = 0; i_2 < numBuffers; i_2++) {\n              var buffer = new Uint8Array(buffers[bufferIndexOffset + i_2]);\n              groupByteBuffer.set(buffer, groupBufferOffset);\n              groupBufferOffset += buffer.byteLength;\n            }\n\n            var weightsEntries = groupWeightsToFetch[i];\n            weightsEntries.forEach(function (weightsEntry) {\n              var byteBuffer = groupBuffer.slice(weightsEntry.groupOffset, weightsEntry.groupOffset + weightsEntry.sizeBytes);\n              var typedArray;\n\n              if (weightsEntry.manifestEntry.dtype === 'float32') {\n                typedArray = new Float32Array(byteBuffer);\n              } else if (weightsEntry.manifestEntry.dtype === 'int32') {\n                typedArray = new Int32Array(byteBuffer);\n              } else {\n                throw new Error(\"Weight \" + weightsEntry.manifestEntry.name + \" has unknown dtype \" + (weightsEntry.manifestEntry.dtype + \".\"));\n              }\n\n              var weightName = weightsEntry.manifestEntry.name;\n\n              if (weightsTensorMap[weightName] != null) {\n                throw new Error(\"Duplicate weight with name \" + weightName + \". \" + \"Please make sure weights names are unique in the manifest JSON.\");\n              }\n\n              weightsTensorMap[weightName] = ops_1.tensor(typedArray, weightsEntry.manifestEntry.shape, weightsEntry.manifestEntry.dtype);\n            });\n            bufferIndexOffset += numBuffers;\n          });\n          return [2, weightsTensorMap];\n      }\n    });\n  });\n}\n\nexports.loadWeights = loadWeights;","map":null,"metadata":{},"sourceType":"script"}