{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar doc_1 = require(\"../doc\");\n\nvar environment_1 = require(\"../environment\");\n\nvar types = require(\"../types\");\n\nvar util = require(\"../util\");\n\nvar broadcast_util = require(\"./broadcast_util\");\n\nvar operation_1 = require(\"./operation\");\n\nvar LogicalOps = function () {\n  function LogicalOps() {}\n\n  LogicalOps.logicalNot = function (x) {\n    util.assertArgumentsAreTensors({\n      x: x\n    }, 'logicalNot');\n    util.assert(x.dtype === 'bool', 'Error Array must be of type bool.');\n    return environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.logicalNot(x);\n    }, {\n      x: x\n    });\n  };\n\n  LogicalOps.logicalAnd = function (a, b) {\n    util.assertArgumentsAreTensors({\n      a: a,\n      b: b\n    }, 'logicalAnd');\n    util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    return environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.logicalAnd(a, b);\n    }, {\n      a: a,\n      b: b\n    });\n  };\n\n  LogicalOps.logicalOr = function (a, b) {\n    util.assertArgumentsAreTensors({\n      a: a,\n      b: b\n    }, 'logicalOr');\n    util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    return environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.logicalOr(a, b);\n    }, {\n      a: a,\n      b: b\n    });\n  };\n\n  LogicalOps.logicalXor = function (a, b) {\n    util.assertArgumentsAreTensors({\n      a: a,\n      b: b\n    }, 'logicalXor');\n    util.assert(a.dtype === 'bool' && b.dtype === 'bool', 'Error Array must be of type bool.');\n    broadcast_util.assertAndGetBroadcastShape(a.shape, b.shape);\n    return LogicalOps.logicalOr(a, b).logicalAnd(LogicalOps.logicalAnd(a, b).logicalNot());\n  };\n\n  LogicalOps.where = function (condition, a, b) {\n    util.assertArgumentsAreTensors({\n      condition: condition,\n      a: a,\n      b: b\n    }, 'where');\n    util.assert(condition.dtype === 'bool' || a.dtype === 'bool' || b.dtype === 'bool', 'Error Array must be of type bool.');\n    util.assertShapesMatch(a.shape, b.shape, 'Error in where: ');\n\n    if (condition.rank === 1) {\n      util.assert(condition.shape[0] === a.shape[0], 'The first dimension of `a` must match the size of `condition`.');\n    } else {\n      util.assertShapesMatch(condition.shape, b.shape, 'Error in where: ');\n    }\n\n    var dtype = types.upcastType(a.dtype, b.dtype);\n    return environment_1.ENV.engine.runKernel(function (backend) {\n      return backend.where(condition, a, b, dtype);\n    }, {\n      condition: condition,\n      a: a,\n      b: b\n    });\n  };\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Logical'\n  }), operation_1.operation], LogicalOps, \"logicalNot\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Logical'\n  }), operation_1.operation], LogicalOps, \"logicalAnd\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Logical'\n  }), operation_1.operation], LogicalOps, \"logicalOr\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Logical'\n  }), operation_1.operation], LogicalOps, \"logicalXor\", null);\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Logical'\n  }), operation_1.operation], LogicalOps, \"where\", null);\n\n  return LogicalOps;\n}();\n\nexports.LogicalOps = LogicalOps;","map":null,"metadata":{},"sourceType":"script"}