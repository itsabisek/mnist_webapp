{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) {\n    if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  }\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar doc_1 = require(\"../doc\");\n\nvar util = require(\"../util\");\n\nvar axis_util = require(\"./axis_util\");\n\nvar operation_1 = require(\"./operation\");\n\nvar ops = require(\"./ops\");\n\nvar NormOps = function () {\n  function NormOps() {}\n\n  NormOps.norm = function (x, ord, axis, keepDims) {\n    if (ord === void 0) {\n      ord = 'euclidean';\n    }\n\n    if (axis === void 0) {\n      axis = null;\n    }\n\n    if (keepDims === void 0) {\n      keepDims = false;\n    }\n\n    util.assertArgumentsAreTensors({\n      x: x\n    }, 'norm');\n    var norm = normImpl(x, ord, axis);\n    var keepDimsShape = norm.shape;\n\n    if (keepDims) {\n      var axes = axis_util.parseAxisParam(axis, x.shape);\n      keepDimsShape = axis_util.expandShapeToKeepDim(norm.shape, axes);\n    }\n\n    return norm.reshape(keepDimsShape);\n  };\n\n  __decorate([doc_1.doc({\n    heading: 'Operations',\n    subheading: 'Matrices'\n  }), operation_1.operation], NormOps, \"norm\", null);\n\n  return NormOps;\n}();\n\nexports.NormOps = NormOps;\n\nfunction normImpl(x, p, axis) {\n  if (axis === void 0) {\n    axis = null;\n  }\n\n  if (x.rank === 0) {\n    return x.abs();\n  }\n\n  if (x.rank !== 1 && axis === null) {\n    return normImpl(x.reshape([-1]), p, axis);\n  }\n\n  if (x.rank === 1 || typeof axis === 'number' || axis instanceof Array && axis.length === 1) {\n    if (p === 1) {\n      return x.abs().sum(axis);\n    }\n\n    if (p === Infinity) {\n      return x.abs().max(axis);\n    }\n\n    if (p === -Infinity) {\n      return x.abs().min(axis);\n    }\n\n    if (p === 'euclidean' || p === 2) {\n      return x.abs().pow(ops.scalar(2, 'int32')).sum(axis).sqrt();\n    }\n\n    throw new Error(\"Error in norm: invalid ord value: \" + p);\n  }\n\n  if (axis instanceof Array && axis.length === 2) {\n    if (p === 1) {\n      return x.abs().sum(axis[0]).max(axis[1] - 1);\n    }\n\n    if (p === Infinity) {\n      return x.abs().sum(axis[1]).max(axis[0]);\n    }\n\n    if (p === -Infinity) {\n      return x.abs().sum(axis[1]).min(axis[0]);\n    }\n\n    if (p === 'fro' || p === 'euclidean') {\n      return x.square().sum(axis).sqrt();\n    }\n\n    throw new Error(\"Error in norm: invalid ord value: \" + p);\n  }\n\n  throw new Error(\"Error in norm: invalid axis: \" + axis);\n}","map":null,"metadata":{},"sourceType":"script"}