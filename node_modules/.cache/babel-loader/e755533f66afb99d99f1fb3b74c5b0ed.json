{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar errors_1 = require(\"../errors\");\n\nvar generic_utils = require(\"../utils/generic_utils\");\n\nfunction isArrayItemInputOrOutputName(key, index, value) {\n  return (key === 'inboundNodes' || key === 'outputLayers' || key === 'inputLayers') && index === 0 && typeof value === 'string';\n}\n\nfunction convertPythonicToTs(pythonicConfig, key) {\n  if (pythonicConfig === null) {\n    return null;\n  } else if (typeof pythonicConfig === 'string') {\n    return generic_utils.toCamelCase(pythonicConfig);\n  } else if (typeof pythonicConfig === 'number' || typeof pythonicConfig === 'boolean') {\n    return pythonicConfig;\n  } else if (pythonicConfig instanceof Array) {\n    var tsArray = [];\n    var arrayLength = pythonicConfig.length;\n\n    for (var i = 0; i < arrayLength; ++i) {\n      var item = pythonicConfig[i];\n\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        tsArray.push(item);\n      } else {\n        tsArray.push(convertPythonicToTs(item, key));\n      }\n    }\n\n    return tsArray;\n  } else {\n    var tsDict = {};\n\n    for (var _i = 0, _a = Object.keys(pythonicConfig); _i < _a.length; _i++) {\n      var pythonicKey = _a[_i];\n      var pythonicValue = pythonicConfig[pythonicKey];\n\n      if (pythonicKey === 'name' && typeof pythonicValue === 'string') {\n        tsDict[pythonicKey] = pythonicValue;\n      } else {\n        var tsKey = generic_utils.toCamelCase(pythonicKey);\n\n        if (generic_utils.SerializableEnumRegistry.contains(pythonicKey) && (typeof pythonicValue === 'string' || pythonicValue == null)) {\n          var enumValue = generic_utils.SerializableEnumRegistry.lookup(pythonicKey, pythonicValue);\n\n          if (enumValue != null) {\n            tsDict[tsKey] = enumValue;\n          } else {\n            throw new errors_1.ValueError(\"Unkown value \" + pythonicValue + \" for \" + pythonicKey + \" Enum\");\n          }\n        } else {\n          tsDict[tsKey] = convertPythonicToTs(pythonicValue, tsKey);\n        }\n      }\n    }\n\n    return tsDict;\n  }\n}\n\nexports.convertPythonicToTs = convertPythonicToTs;\n\nfunction convertTsToPythonic(tsConfig, key) {\n  if (tsConfig === null || tsConfig === undefined) {\n    return null;\n  } else if (typeof tsConfig === 'string') {\n    return generic_utils.toSnakeCase(tsConfig);\n  } else if (typeof tsConfig === 'number' || typeof tsConfig === 'boolean') {\n    return tsConfig;\n  } else if (tsConfig instanceof Array) {\n    var pyArray = [];\n    var arrayLength = tsConfig.length;\n\n    for (var i = 0; i < arrayLength; ++i) {\n      var item = tsConfig[i];\n\n      if (isArrayItemInputOrOutputName(key, i, item)) {\n        pyArray.push(item);\n      } else {\n        pyArray.push(convertTsToPythonic(item, key));\n      }\n    }\n\n    return pyArray;\n  } else {\n    var pyDict = {};\n\n    for (var _i = 0, _a = Object.keys(tsConfig); _i < _a.length; _i++) {\n      var tsKey = _a[_i];\n      var tsValue = tsConfig[tsKey];\n      var pyKey = generic_utils.toSnakeCase(tsKey);\n\n      if ((tsKey === 'name' || tsKey === 'className') && typeof tsValue === 'string') {\n        pyDict[pyKey] = tsValue;\n      } else {\n        if (generic_utils.SerializableEnumRegistry.contains(pyKey) && (typeof tsValue === 'string' || tsValue == null)) {\n          var enumString = generic_utils.SerializableEnumRegistry.reverseLookup(pyKey, tsValue);\n          pyDict[pyKey] = enumString;\n        } else {\n          pyDict[pyKey] = convertTsToPythonic(tsValue, tsKey);\n        }\n      }\n    }\n\n    return pyDict;\n  }\n}\n\nexports.convertTsToPythonic = convertTsToPythonic;","map":null,"metadata":{},"sourceType":"script"}